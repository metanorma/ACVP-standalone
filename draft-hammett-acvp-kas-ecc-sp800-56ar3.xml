<?xml version="1.0" encoding="UTF-8"?>
<nist-standard xmlns="https://www.metanorma.org/ns/nist" type="semantic" version="2.0.5">
<bibdata type="standard">
<title language="en" format="text/plain" type="main">ACVP KAS ECC SP800-56Ar3 JSON Specification</title>

<title language="en" format="text/plain" type="short-title">ACVP KAS ECC SP800-56Ar3 JSON Specification</title>
<uri type="email">algotest@list.nist.gov</uri><uri type="doi">https://doi.org/10.6028/NIST.CSRC.AVCP.KAS-ECC-SP800-56Ar3</uri><docidentifier type="NIST">ACVP KAS-ECC-SP800-56Ar3 Revision 1</docidentifier><docidentifier type="nist-long">Automated Cryptographic Validation Protocol KAS-ECC-SP800-56Ar3 Revision 1</docidentifier><docidentifier type="nist-mr">NIST.CSRC.ACVP.KAS-ECC-SP800-56Ar3.r-1.eng</docidentifier><docnumber>KAS-ECC-SP800-56Ar3</docnumber><date type="issued"><on>2020-01-31</on></date><contributor><role type="author"/><person>
<name><completename>Russell Hammett</completename></name>
<affiliation><organization>
<name>HII Technical Solutions Division</name>
<address><formattedAddress>302 Sentinel Drive, Suite #300, Annapolis Junction, MD 20701</formattedAddress></address></organization></affiliation></person></contributor><contributor><role type="publisher"/><organization>
<name>National Institute of Standards and Technology</name>
<subdivision>Computer Security Division, Information Technology Laboratory</subdivision></organization></contributor><edition>Revision 1</edition><language>en</language><script>Latn</script><abstract><p>This document defines the JSON schema for testing SP800-56Ar3 KAS ECC implementations with the ACVP specification.</p>
</abstract><status><stage>final</stage><substage>active</substage></status><copyright><from>2020</from><owner><organization>
<name>National Institute of Standards and Technology</name>
</organization></owner></copyright><series type="main">
<title>NIST Cybersecurity Technical Specification</title>
<abbreviation>NIST CSTS</abbreviation></series><series type="secondary">
<title>Automated Cryptographic Validation Protocol</title>
<abbreviation>ACVP</abbreviation></series><keyword>ACVP</keyword><keyword>cryptography</keyword><ext><doctype>standard</doctype></ext></bibdata>
<boilerplate>


  <legal-statement>

<clause id="authority3">
<title>Disclaimer</title>
<p id="_863aa6ce-5a57-69b6-7fbf-9ed44a41c5ea">Any mention of commercial products or reference to commercial organizations is for information only; it does not imply recommendation or endorsement by NIST, nor does it imply that the products mentioned are necessarily the best available for the purpose.</p>
</clause>

<clause id="authority3a">
  <title>Additional Information</title>
  <p id="_c686fd53-3de8-7756-9855-01ef6116c4ac">For additional information on NIST’s Cybersecurity programs, projects and publications, visit the <link target="https://csrc.nist.gov">Computer Security Resource Center</link>. Information on other efforts at <link target="https://www.nist.gov">NIST</link> and in the <link target="https://www.nist.gov/itl">Information Technology Laboratory</link> (ITL) is also available.</p>
</clause>
</legal-statement>

<feedback-statement>
  

<clause id="authority5">
  <p align="center" id="_3c964232-2209-46b9-23ff-8d9dbf50f7e3"><strong>Comments on this publication may be submitted to:</strong></p>

<p align="center" id="_fd3e950b-c15e-6309-a933-da7ca17fced9">National Institute of Standards and Technology <br/>
  Attn: Computer Security Division, Information Technology Laboratory <br/>
  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 <br/>
  
  Email: <link target="mailto:algotest@list.nist.gov"/>
  </p>

<p align="center" id="_98da11c8-716c-a4a5-0c72-942c806716f3">All comments are subject to release under the Freedom of Information Act (FOIA).</p>
</clause>
</feedback-statement>
</boilerplate>
<preface><abstract id="_abstract"><title>Abstract</title><p id="_3f315573-e8ad-8b76-14bd-c6226339b647">This document defines the JSON schema for testing SP800-56Ar3 KAS ECC implementations with the ACVP specification.</p>
</abstract><foreword id="_2ec0e566-ba9d-25ab-2eec-bb7fb030b1a2" obligation="informative">
<title>Foreword</title>
<p id="_69bdcca8-f693-594d-5f4e-1e7dc7fe21de">The Information Technology Laboratory (ITL) at the National Institute of Standards and Technology (NIST) promotes the U.S. economy and public welfare by providing technical leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test methods, reference data, proof of concept implementations, and technical analyses to advance the development and productive use of information technology. ITL’s responsibilities include the development of management, administrative, technical, and physical standards and guidelines for the cost-effective security and privacy of other than national security-related information in federal information systems. The Special Publication 800-series reports on ITL’s research, guidelines, and outreach efforts in information system security, and its collaborative activities with industry, government, and academic organizations.</p>
</foreword><clause id="_audience" obligation="informative">
<title>Audience</title>
<p id="_d703bff5-9532-6af8-0477-8938fa6a1371">This document is intended for the users and developers of ACVP.</p>
</clause><clause id="_conventions" obligation="informative">
<title>Conventions</title>
<p id="_3239f539-857d-1eda-6971-e6ce8a49a54c">The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in BCP 14 of <eref type="inline" bibitemid="RFC2119" citeas="RFC 2119"/> and <eref type="inline" bibitemid="RFC8174" citeas="RFC 8174"/> when, and only when, they appear in all capitals, as shown here.</p>
</clause><acknowledgements id="_acknowledgements" obligation="informative"><title>Acknowledgements</title><p id="_1b3c0a2a-1733-8a7a-fbaf-605dcd79b05d">This document is produced by the Security Testing, Validation and Measurement group under the Automated Cryptographic Validation Testing (ACVT) program.</p>
</acknowledgements><executivesummary id="_executive_summary" obligation="normative">
<title>Executive Summary</title>
<p id="_4dd933f3-dbe0-2dcf-00c1-938dcff29caf">The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing SP800-56Ar3 KAS ECC implementations using ACVP.</p>
</executivesummary></preface><sections>








<clause id="introduction" obligation="normative">
<title>Introduction</title>
<p id="_b4aa29ec-6633-a1d2-5315-c14eb3c87cc7">The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing SP800-56Ar3 KAS ECC implementations using ACVP.</p>
</clause>

<clause id="supported" obligation="normative">
<title>Supported KAS-ECCs</title>
<p id="_c1c22e5d-d403-aeba-a2e1-2341b8a93d2d">The following key derivation functions <strong>MAY</strong> be advertised by the ACVP compliant cryptographic module:</p>

<ul id="_1fadf309-c3b7-4a08-0134-ee9022995935"><li><p id="_1d127ab0-cdb6-a2f0-a265-473e9afbf0ad">KAS-ECC / null / Sp800-56Ar3</p>
</li>
<li><p id="_c71b87a5-2cd3-069a-f42a-81747fc17a3b">KAS-ECC / CDH-Component / Sp800-56Ar3</p>
</li>
</ul>
</clause>

<clause id="testtypes" obligation="normative">
<title>Test Types and Test Coverage</title>
<p id="_6c2d1b9e-7eb9-1c43-9752-59b2f8676d04">The ACVP server performs a set of tests on the KAS protocol in order to assess the correctness and robustness of the implementation. A typical ACVP validation session <strong>SHALL</strong> require multiple tests to be performed for every supported permutation of KAS capabilities. This section describes the design of the tests used to validate implementations of KAS algorithms.</p>

<clause id="_test_types" obligation="normative">
<title>Test Types</title>
<p id="_d1d64d9e-d40c-8f5d-d282-61262687cc38">There are two test types for KAS testing:</p>

<ul id="_b459da39-8e75-23a6-ec2f-2b814231625f"><li><p id="_c5830f73-6ba2-1859-6da5-94b80444d446">“AFT” — Algorithm Function Test. In the AFT test mode, the IUT <strong>SHALL</strong> act as a party in the Key Agreement with the ACVP server. The server <strong>SHALL</strong> generate and provide all necessary information for the IUT to perform a successful key agreement; both the server and IUT <strong>MAY</strong> act as party U/V, as well as recipient/provider to key confirmation.</p>
</li>
<li><p id="_30e09067-dcd7-2e55-a8d0-b009ad462247">“VAL” — Validation Test. In the VAL test mode, The ACVP server <strong>MUST</strong> generate a complete (from both party U and party V’s perspectives) key agreement, and expects the IUT to be able to determine if that agreement is valid. Various types of errors <strong>MUST</strong> be introduced in varying portions of the key agreement process (changed DKM, changed key, changed hash digest, etc), that the IUT <strong>MUST</strong> be able to detect and report on.</p>
</li>
</ul>
</clause>

<clause id="_test_coverage" obligation="normative">
<title>Test Coverage</title>
<p id="_4e103605-93a8-9c52-0928-fada46603fc6">The tests described in this document have the intention of ensuring an implementation is conformant to <eref type="inline" bibitemid="SP800-56Ar3" citeas="SP 800-56A Rev. 3"/>.</p>

<clause id="requirements_covered_kas_ecc" obligation="normative">
<title>KAS-ECC Requirements Covered</title>
<ul id="_8e17ebbe-a8c3-77a4-f67c-644d70e941ec"><li><p id="_82bb95bb-d80a-4bdf-23f4-6aedd55eb8a0">SP 800-56Ar3 — 5.1 Cryptographic Hash Functions.  SHA1, SHA2, and SHA3 hash functions <strong>SHALL</strong> be available for the various pieces of KAS requiring use of a hash function; such as approved MACs and OneStep KDF.</p>
</li>
<li><p id="_456922bf-987a-6bd7-ed6f-b5ffd44b6d38">SP 800-56Ar3 — 5.2 Message Authentication Code (MAC) Algorithms.  AES-CMAC, HMAC, and KMAC algorithms <strong>SHALL</strong> be available for testing under KDFs and KC as the specification states.</p>
</li>
<li><p id="_767938f6-a416-103f-55a9-518149f03238">SP 800-56Ar3 — 5.3 Random Number Generation.  Though random values are used, the testing of the construction of those random values <strong>SHALL NOT</strong> be in scope of ACVP testing.</p>
</li>
<li><p id="_0f42054f-85c2-68d8-13a2-6c7035c57443">SP 800-56Ar3 — 5.4 Nonces.  Though nonces are used, the testing of the construction of those nonces <strong>SHALL NOT</strong> be in scope of ACVP testing.</p>
</li>
<li><p id="_34a97b0e-d607-5d03-364a-832d63117387">SP 800-56Ar3 — 5.5 Domain Parameters.  Domain Parameters <strong>SHALL</strong> be used in the testing of KAS as per the specification, though the generation of those parameters is outside the scope of testing.</p>
</li>
<li><p id="_c9fa63bf-15d0-a0a9-06e3-e5c58b923904">SP 800-56Ar3 — 5.6 Key-Pair Generation.  Each KAS scheme from one or both parties utilizes a key pair for arriving at a shared secret, and deriving a key.  Though a key pair(s) are utilized in ACVP testing, the testing of the generation of said key pairs is outside the scope of this testing.</p>
</li>
<li><p id="_106c78c8-dc89-2c91-6c3c-52c434537615">SP 800-56Ar3 — 5.7 DLC Primitives.  Diffie Hellman and MQV <strong>SHALL</strong> be tested under their respective KAS schemes.</p>
</li>
<li><p id="_44e63e88-e9b1-2414-223d-715c07daa259">SP 800-56Ar3 — 5.8 Key-Derivation Methods for Key-Establishment Schemes.  The ACVP server <strong>SHALL</strong> make various KDFs available for testing.  The KDFs covered under ACVP server testing <strong>SHALL</strong> include the KDFs specified in SP800-56B, SP800-56C, SP800-108, and SP800-135 (where applicable).</p>
</li>
<li><p id="_28470235-e046-0a99-9299-18f8dff60c3d">SP 800-56Ar3 — 5.9 KeyConfirmation.  The ACVP server <strong>SHALL</strong> support key confirmation for applicable KAS and KTS schemes.</p>
</li>
<li><p id="_6d4565fe-2eb0-ead6-f4cb-ff1dc3088c84">SP 800-56Ar3 — 6 Key Agreement Schemes. The ACVP server <strong>SHALL</strong> support testing for all KAS schemes specified in the SP800-56Ar3 document.</p>
</li>
<li><p id="_3894b67e-a215-279b-80b1-96272a89f1bb">SP 800-56Cr1 — 4 One-Step Key Derivation.  One-Step Key Derivation testing <strong>SHALL</strong> be supported by the ACVP server.  FixedInfo construction is covered within the ACVP specification, and can be tailored to the IUTs needs.  ASN.1 format of fixedInfo construction (currently) is NOT supported.</p>
</li>
<li><p id="_5032177a-c345-8e06-123e-eb3a15f9cdfd">SP 800-56Cr1 — 5 Two-Step Key Derivation.  Two-Step Key Derivation testing <strong>SHALL</strong> be supported by the ACVP server.  FixedInfo construction is covered within the ACVP specification, and can be tailored to the IUTs needs.  ASN.1 format of fixedInfo construction (currently) is NOT supported.</p>
</li>
<li><p id="_566e1ef2-8be3-6a1f-67c6-480a2e134457">SP 800-108 — 4 Pseudorandom Function (PRF).  All iterations of the KDF described in SP800-108 use a separate PRF.  All
implementations of the PRF <strong>SHALL</strong> be available for testing through the ACVP server generated tests.</p>
</li>
<li><p id="_0076631a-6c78-7ca3-e082-fc29bd257cec">SP 800-108 — 5 Key Derivation Functions (KDF).  The three
implementations of KDFs in SP800-108 <strong>SHALL</strong> be available for
testing through the ACVP Server.</p>
</li>
</ul>
</clause>

<clause id="requirements_not_covered_kas_ecc" obligation="normative">
<title>KAS-ECC Requirements Not Covered</title>
<ul id="_67a301c5-c892-d84d-e455-5ffa8a8e3de7"><li><p id="_0335fdf0-0358-28ae-6b45-4e8e7cdb1459">SP 800-56Ar3 — 4.3 DLC-based Key-Transport Process.  KeyWrapping is not incorporated into ACVP testing.</p>
</li>
<li><p id="_c9d9adf4-fb0d-c84e-1ea7-e1252f523fd2">SP 800-56Ar3 — 5.3 Random Number Generation.  Though random values are used, the testing of the construction of those random values <strong>SHALL NOT</strong> be in scope of ACVP testing.</p>
</li>
<li><p id="_d0defc5f-e008-8c7b-90d3-a7dee0f098b5">SP 800-56Ar3 — 5.4 Nonces.  Though nonces are used, the testing of the construction of those nonces <strong>SHALL NOT</strong> be in scope of ACVP testing.</p>
</li>
<li><p id="_93552fc8-c7f4-2ec5-4610-4bb043e441cc">SP 800-56Ar3 — 5.5 Domain Parameters.  Domain Parameters <strong>SHALL</strong> be used in the testing of KAS as per the specification, though the generation of those parameters is outside the scope of testing.</p>
</li>
<li><p id="_d1c273bb-c3d0-5eee-b55b-7f18f3f32442">SP 800-56Ar3 — 5.6 Key-Pair Generation.  Each KAS scheme from one or both parties utilizes a key pair for arriving at a shared secret, and deriving a key.  Though a key pair(s) are utilized in ACVP testing, the testing of the generation of said key pairs is outside the scope of this testing.</p>
</li>
<li><p id="_0dcc357f-524e-fd75-bc35-c0e8d101890d">SP 800-56Ar3 — 5.6.2 Required Assurances.  IUT assurance testing is outside the scope of ACVP testing.</p>
</li>
<li><p id="_971f7b7f-ab14-1b1e-b022-08ab144c4b5d">SP 800-56Ar3 — 5.6.2 Key Pair Management.  Testing the IUT’s
management of Key Pairs is outside the scope of ACVP testing.</p>
</li>
<li><p id="_df6d2814-e7e4-128b-44f1-7a065b07a76e">SP 800-56Ar3 — 5.8.1.2 The ASN.1 Format for FixedInfo.  The ACVP server (currently) <strong>SHALL NOT</strong> support the testing of this format of fixed info.</p>
</li>
<li><p id="_c324c815-0918-58b2-aa7d-bcb006830797">SP 800-56Ar3 — 7 Rationale for Selecting a Specific Scheme.  There is no testing associated with the IUT’s choice of selecting a specific scheme.</p>
</li>
<li><p id="_36877950-18df-6ce4-b557-c1a2fc8d8737">SP 800-56Ar3 — 8 Key Recovery.  Key Recovery <strong>SHALL NOT</strong> be within the scope of ACVP testing.</p>
</li>
<li><p id="_eac95403-ab56-bee6-8926-64c7cfbf0f0e">SP 800-56Cr1 — 4 One-Step Key Derivation.  ASN.1 format of
fixedInfo construction (currently) is NOT supported.</p>
</li>
<li><p id="_beda6ddc-97f9-e4c2-7fc0-48497a35e461">SP 800-56Cr1 — 5 Two-Step Key Derivation.  ASN.1 format of
fixedInfo construction (currently) is NOT supported.</p>
</li>
<li><p id="_f9a48193-28b0-cff1-099e-72369ab2c466">SP 800-56Cr1 — 7 Selecting Hash Functions and MAC Algorithms.  The process that goes into the selection of Hash functions and MAC algorithms <strong>SHALL NOT</strong> be in scope of ACVP testing, though the ACVP server <strong>SHALL</strong> support all indicated Hash and MAC functions.</p>
</li>
<li><p id="_36183fb4-5277-3013-8c15-0d0af34c449e">SP 800-56Cr1 — 7 Selecting Hash Functions and MAC Algorithms.  The process that goes into the selection of Hash functions and MAC algorithms <strong>SHALL NOT</strong> be in scope of ACVP testing, though the ACVP server <strong>SHALL</strong> support all indicated Hash and MAC functions.</p>
</li>
</ul>
</clause>
</clause>
</clause>

<clause id="capabilities" obligation="normative">
<title>Capabilities Registration</title>
<p id="_2348a824-f5e4-d0fd-c0b8-621f1a48324b">ACVP requires crypto modules to register their capabilities. This allows the crypto module to advertise support for specific algorithms, notifying the ACVP server which algorithms need test vectors generated for the validation process.  This section describes the constructs for advertising support of KAS ECC algorithms to the ACVP server.</p>

<p id="_e83f2311-d713-25d1-f1d9-e2e8ae4204ff">The algorithm capabilities <strong>MUST</strong> be advertised as JSON objects within the ‘algorithms’ value of the ACVP registration message. The ‘algorithms’ value is an array, where each array element is an individual JSON object defined in this section. The ‘algorithms’ value is part of the ‘capability_exchange’ element of the ACVP JSON registration message. See the ACVP specification <eref type="inline" bibitemid="ACVP" citeas="ACVP"/> for more details on the registration message.</p>

<clause id="prerequisites" obligation="normative">
<title>Prerequisites</title>
<p id="_eecbb4b2-6f7f-8408-2ee1-b41ca76bd504">Each algorithm implementation <strong>MAY</strong> rely on other cryptographic primitives.	For example, RSA Signature algorithms depend on an underlying hash function. Each of these underlying algorithm primitives must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</p>

<p id="_f7f16e22-e58b-43df-39ba-87d6ba6a7ad2">Prerequisites, if applicable, <strong>MUST</strong> be submitted in the registration as the <tt>prereqVals</tt> JSON property array inside each element of the <tt>algorithms</tt> array. Each element in the <tt>prereqVals</tt> array <strong>MUST</strong> contain the following properties</p>

<table id="_d4322f66-7335-d05d-c9ce-bc8545c49eaa">
<name>Prerequisite Properties</name>
<thead><tr><th valign="top" align="left">JSON Property</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">a prerequisite algorithm</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">valValue</td>
<td valign="top" align="left">algorithm validation number</td>
<td valign="top" align="left">string</td>
</tr></tbody>
</table>

<p id="_ed4b9036-78af-d8f8-7bd2-30af422f6d02">A “valValue” of “same” <strong>SHALL</strong> be used to indicate that the prerequisite is being met by a different algorithm in the capability exchange in the same registration.</p>

<p id="_e7955338-40d4-e44b-74b8-1f64ebffc1a4">An example description of prerequisites within a single algorithm capability exchange looks like this</p>

<sourcecode id="_89db1eb0-63dd-71b7-8bda-ebdf011fa2ba" lang="json">"prereqVals":
[
  {
    "algorithm": "Alg1",
    "valValue": "Val-1234"
  },
  {
    "algorithm": "Alg2",
    "valValue": "same"
  }
]</sourcecode>

</clause>

<clause id="prereq_algs" obligation="normative">
<title>Prerequisite Algorithms</title>
<p id="_27b0f3cd-de6e-aa66-5728-230526b634c5">Some algorithm implementations rely on other cryptographic primitives. For example, IKEv2 uses an underlying SHA algorithm. Each of these underlying algorithm primitives must be validated, either separately or as part of the same 	submission. ACVP provides a mechanism for specifying the required prerequisites:</p>

<table id="rereqs_table">
<name>Prerequisite Algorithms JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">a prerequisite algorithm</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">CMAC, DRBG, ECDSA, HMAC, KMAC, SHA, SP800-108</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">valValue</td>
<td valign="top" align="left">algorithm validation number</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">actual number or “same”</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">prereqAlgVal</td>
<td valign="top" align="left">prerequistie algorithm validation</td>
<td valign="top" align="left">object with algorithm and valValue properties</td>
<td valign="top" align="left">see above</td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>

<p id="_958b4d7b-94bb-c95e-86e7-b4faae21bbae">KAS has conditional prerequisite algorithms, depending on the capabilities registered:</p>

<table id="prereqs_requirements_table">
<name>Prerequisite requirement conditions</name>
<thead><tr><th valign="top" align="left">Prerequisite Algorithm</th>
<th valign="top" align="left">Condition</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">DRBG</td>
<td valign="top" align="left">Always <strong>REQUIRED</strong></td>
</tr><tr><td valign="top" align="left">SHA</td>
<td valign="top" align="left">Always <strong>REQUIRED</strong></td>
</tr><tr><td valign="top" align="left">ECDSA</td>
<td valign="top" align="left">If the implementation supports fullVal (see <xref target="supported_functions"/>), then ECDSA keyVer validation is <strong>REQUIRED</strong>. If the implementation supports keyPairGen (see <xref target="supported_functions"/>), then ECDSA keyGen and ECDSA keyVer validation are <strong>REQUIRED</strong>.</td>
</tr><tr><td valign="top" align="left">CMAC</td>
<td valign="top" align="left">CMAC validation <strong>REQUIRED</strong> when IUT is performing KeyConfirmation (KC) or a KDF and utilizing CMAC.</td>
</tr><tr><td valign="top" align="left">HMAC</td>
<td valign="top" align="left">HMAC validation <strong>REQUIRED</strong> when IUT is performing KeyConfirmation (KC) or a KDF and utilizing HMAC.</td>
</tr><tr><td valign="top" align="left">KMAC</td>
<td valign="top" align="left">KMAC validation <strong>REQUIRED</strong> when IUT is performing KeyConfirmation (KC) or a KDF and utilizing KMAC.</td>
</tr></tbody>
</table>
</clause>

<clause id="cap_ex" obligation="normative">
<title>Algorithm Capabilities JSON Values</title>
<p id="_b1f80d0b-d99e-9e09-69e8-115ba5b9fbc5">Each algorithm capability advertised is a self-contained JSON object using the following values.</p>

<table id="caps_table">
<name>Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">The algorithm under test</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">KAS-ECC</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">The algorithm testing revision to use.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">“Sp800-56Ar3”</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">prereqVals</td>
<td valign="top" align="left">Prerequisite algorithm validations</td>
<td valign="top" align="left">array of prereqAlgVal objects</td>
<td valign="top" align="left">See <xref target="prereq_algs"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">function</td>
<td valign="top" align="left">Type of function supported</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">See <xref target="supported_functions"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">iutId</td>
<td valign="top" align="left">The identifier of the IUT.</td>
<td valign="top" align="left">hex</td>
<td valign="top" align="left"/><td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">scheme</td>
<td valign="top" align="left">Array of supported key agreement schemes each having their own capabilities</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supported_schemes"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">domainParameterGenerationMethods</td>
<td valign="top" align="left">Array of IUT supported domain parameter generation methods.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">P-224, P-256, P-384, P-521, K-233, K-283, K-409, K-571, B-233, B-283, B-409, B-571</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<p id="_1472130b-f58e-8bce-58f1-4a7cf2a875cd">Note: Some optional values are <strong>REQUIRED</strong> depending on the algorithm. Failure to provide these values will result in the ACVP server returning an error to the ACVP client during registration.</p>
</clause>

<clause id="supported_functions" obligation="normative">
<title>Supported KAS ECC Functions</title>
<p id="_14b25be2-7d07-92cf-2fe8-909b21cc152b">The following function types <strong>MAY</strong> be advertised by the ACVP compliant crypto module:</p>

<ul id="_81c8b67e-4b07-cfe5-85d7-37288abf0522"><li><p id="_e70c6f8e-6e21-2253-4053-571bbd6b910b">keyPairGen — IUT can perform keypair generation.</p>
</li>
<li><p id="_293c2e77-7f8d-a842-843d-943b8213b856">partialVal — IUT can perform partial public key validation ([SP800-56Ar3] section 5.6.2.3).</p>
</li>
<li><p id="_fc7aa090-fcc2-3c00-7f8e-55dd3eb69fbe">fullVal — IUT can perform full public key validation (
<eref type="inline" bibitemid="SP800-56Ar3" citeas="SP 800-56A Rev. 3"/> section 5.6.2.3).</p>
</li>
</ul>
</clause>

<clause id="schemes" obligation="normative">
<title>KAS ECC Schemes</title>
<p id="_46ddee50-b9a3-20c1-ed47-61c1d110c845">All other scheme capabilities are advertised as a self-contained JSON object using the following values.  Note that AT LEAST one valid scheme must be registered.</p>

<clause id="supported_schemes" obligation="normative">
<title>KAS ECC Scheme Capabilities JSON Values</title>
<ul id="_7f77e520-7b9d-8c59-2629-5bdb6ea0b953"><li><p id="_6e1612f1-092a-f46b-336b-55b289a8cf05">ephemeralUnified — keyConfirmation not supported.</p>
</li>
<li><p id="_e2fd5bd9-dacd-78b8-9bf7-78cc5e97633e">fullMqv</p>
</li>
<li><p id="_868d770b-7ac0-140f-7be5-e5aef1d0e1b7">fullUnified</p>
</li>
<li><p id="_665e3d0b-eb42-f50b-5ee8-f8abf18732ec">onePassDh — Can only provide unilateral key confirmation party V to party U.</p>
</li>
<li><p id="_516b6524-7d27-b43a-e0ca-0909e80fa9d1">onePassMqv</p>
</li>
<li><p id="_fb37a4ff-3ef2-c995-224a-101e732edbd7">onePassUnified</p>
</li>
<li><p id="_9ce3f605-48cb-95c5-24fc-f4eff062da58">staticUnified</p>
</li>
</ul>

<table id="scheme_caps_table">
<name>Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">kasRole</td>
<td valign="top" align="left">Roles supported for key agreement</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">initiator and/or responder</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">kdfMethods</td>
<td valign="top" align="left">The KDF methods to use when testing KAS schemes.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left"><xref target="kdfmethods"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyConfirmationMethod</td>
<td valign="top" align="left">The KeyCnfirmation capabilities (when supported) for the scheme.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left"><xref target="keyconfirmmethod"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left"/><td valign="top" align="left"> The length of the key to derive (using a KDF) or transport (using a KTS scheme).  This value should be large enough to accommodate the key length used for the mac algorithms in use for key confirmation, ideally the maximum value the IUT can support with their KAS/KTS implementation.  Maximum value (for testing purposes) is 1024.</td>
<td valign="top" align="left">integer</td>
<td valign="top" align="left">128 minimum without KC, 136 minimum with KC, maximum 1024.</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<clause id="kdfmethods" obligation="normative">
<title>Supported Kdf Methods</title>
<p id="_d1f15cd7-a388-6931-b8ff-76056a40265f">Note that AT LEAST one KDF Method is required for KAS schemes.  The following <strong>MAY</strong> be advertised by the ACVP compliant crypto module:</p>

<table id="_6c15bea2-028e-c1e6-7fd0-d27fcf642e04">
<name>KDF Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">oneStepKdf</td>
<td valign="top" align="left">Indicates the IUT will be testing key derivation using the SP800-56Cr1 OneStepKdf.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left"><xref target="onestepkdf"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">oneStepNoCounterKdf</td>
<td valign="top" align="left">Indicates the IUT will be testing key derivation using the SP800-56Cr1 OneStepNoCounterKdf.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left"><xref target="onestepnocounterkdf"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">twoStepKdf</td>
<td valign="top" align="left">Indicates the IUT will be testing key derivation using the SP800-56Cr1 TwoStepKdf.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left"><xref target="twostepkdf"/></td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>

<clause id="onestepkdf" obligation="normative">
<title>One Step KDF Capabilities</title>
<table id="_2822f7c1-6e16-c6be-5f6b-52d7466a1680">
<name>One Step KDF Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">auxFunctions</td>
<td valign="top" align="left">The auxiliary functions to use with the KDF.</td>
<td valign="top" align="left">array of <xref target="auxfunc"/></td>
<td valign="top" align="left">See <xref target="auxfunc"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">fixedInfoPattern</td>
<td valign="top" align="left">The pattern used for fixedInfo construction.</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">See <xref target="fixedinfopatcon"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">encoding</td>
<td valign="top" align="left">The encoding type to use with fixedInfo construction.  Note concatenation is currently supported.  ASN.1 should be coming.</td>
<td valign="top" align="left">array of string</td>
<td valign="top" align="left">concatenation</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<table id="auxfunc">
<name>AuxFunction Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">auxFunctionName</td>
<td valign="top" align="left">The auxiliary function to use. Note that a customization string of “KDF” is used for the function when KMAC is utilized.</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">SHA-1, SHA2-224, SHA2-256, SHA2-384, SHA2-512, SHA2-512/224, SHA2-512/256, SHA3-224, SHA3-256, SHA3-384, SHA3-512, HMAC-SHA-1, HMAC-SHA2-224, HMAC-SHA2-256, HMAC-SHA2-384, HMAC-SHA2-512, HMAC-SHA2-512/224, HMAC-SHA2-512/256, HMAC-SHA3-224, HMAC-SHA3-256, HMAC-SHA3-384, HMAC-SHA3-512, KMAC-128, KMAC-256</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macSaltMethods</td>
<td valign="top" align="left">How the salt is determined (default being all 00s, random being a random salt).</td>
<td valign="top" align="left">array of string</td>
<td valign="top" align="left">default, random</td>
<td valign="top" align="left">Not optional for mac based auxiliary functions.</td>
</tr></tbody>
</table>
</clause>

<clause id="onestepnocounterkdf" obligation="normative">
<title>One Step No Counter KDF Capabilities</title>
<p id="_581355d2-a2fd-8efd-f665-f943dfe2a00c">The one step no counter KDF is a special implementation of the one step KDF.  This implementation of the KDF does not utilize a 32 bit counter as a part of the concatenation that gets fed into function <tt>H</tt>.  As such, there is no loop within the KDF due to there being no information changing between iterations of the potential concatenation, and the KDF output length is capped at the output length of the chosen aux function (or 2048 in the case of KMAC).</p>

<table id="_d1c38178-fc9d-1cf4-ad39-091d18a6995f">
<name>One Step No Counter KDF Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">auxFunctions</td>
<td valign="top" align="left">The auxiliary functions to use with the KDF.</td>
<td valign="top" align="left">array of <xref target="auxfuncnocounter"/></td>
<td valign="top" align="left">See <xref target="auxfuncnocounter"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">fixedInfoPattern</td>
<td valign="top" align="left">The pattern used for fixedInfo construction.</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">See <xref target="fixedinfopatcon"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">encoding</td>
<td valign="top" align="left">The encoding type to use with fixedInfo construction.  Note concatenation is currently supported.  ASN.1 should be coming.</td>
<td valign="top" align="left">array of string</td>
<td valign="top" align="left">concatenation</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<table id="auxfuncnocounter">
<name>AuxFunction Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">auxFunctionName</td>
<td valign="top" align="left">The auxiliary function to use. Note that a customization string of “KDF” is used for the function when KMAC is utilized.</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">SHA-1, SHA2-224, SHA2-256, SHA2-384, SHA2-512, SHA2-512/224, SHA2-512/256, SHA3-224, SHA3-256, SHA3-384, SHA3-512, HMAC-SHA-1, HMAC-SHA2-224, HMAC-SHA2-256, HMAC-SHA2-384, HMAC-SHA2-512, HMAC-SHA2-512/224, HMAC-SHA2-512/256, HMAC-SHA3-224, HMAC-SHA3-256, HMAC-SHA3-384, HMAC-SHA3-512, KMAC-128, KMAC-256</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left"/><td valign="top" align="left"> The length of the keying material to derive (cannot exceed output length of aux function)</td>
<td valign="top" align="left">No</td>
<td valign="top" align="left">macSaltMethods</td>
<td valign="top" align="left">How the salt is determined (default being all 00s, random being a random salt).</td>
</tr></tbody>
</table>
</clause>

<clause id="twostepkdf" obligation="normative">
<title>Two Step KDF Capabilities</title>
<table id="_47a91968-e3fe-ed85-ed0f-877e63f89420">
<name>Two Step KDF Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">capabilities</td>
<td valign="top" align="left">The capabilities supported for the Two Step KDF.</td>
<td valign="top" align="left">array of <xref target="twostepcapcap"/></td>
<td valign="top" align="left">See <xref target="twostepcapcap"/></td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<p id="_a19eeb95-ce2f-b4a4-c353-cf0a33656b96">Note this capabilities object is very similar to the capability object from SP800-108.  Specific restrictions inherited from  SP800-108 include the following.</p>

<ul id="_5cedcedd-6064-7c4e-69fc-cae671eadd26"><li><p id="_d01d976c-1ead-396f-2b43-860af3f44daf">The ‘fixedDataOrder’ options “none” and “before iterator” are not valid for “counter” KDF.  The ‘fixedDataOrder’ option “middle fixed data” is not valid for “feedback” nor “double pipeline iterator” KDF.</p>
</li>
<li><p id="_d7ffa95a-0046-a3fc-2ebf-7b820565ae5f">A ‘counterLength’of 0 describes that there is no counter used.  The 0 option is not valid  for “counter” KDF.</p>
</li>
<li><p id="_c24156fa-8e16-73fe-edbe-4b1bad9c6337">When’counterLength’ contains a value of “0”, ‘fixedDataOrder’must contain a value of “none” and vice versus.</p>
</li>
</ul>

<table id="twostepcapcap">
<name>TwoStepCapabilities Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">macSaltMethod</td>
<td valign="top" align="left">How the salt is determined (default being all 00s, random being a random salt).</td>
<td valign="top" align="left">array of string</td>
<td valign="top" align="left">default, random</td>
<td valign="top" align="left">Not optional for mac based auxiliary functions.</td>
</tr><tr><td valign="top" align="left">fixedInfoPattern</td>
<td valign="top" align="left">The pattern used for fixedInfo construction.</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">See <xref target="fixedinfopatcon"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">encoding</td>
<td valign="top" align="left">The encoding type to use with fixedInfo construction.  Note concatenation is currently supported.  ASN.1 should be coming.</td>
<td valign="top" align="left">array of string</td>
<td valign="top" align="left">concatenation</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">kdfMode</td>
<td valign="top" align="left">The strategy for running the KDF.</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">counter, fedback, double pipeline iteration</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macMode</td>
<td valign="top" align="left">The macMode supported by the KDF.</td>
<td valign="top" align="left">array of string</td>
<td valign="top" align="left">CMAC-AES128, CMAC-AES192, CMAC-AES256, HMAC-SHA-1, HMAC-SHA2-224, HMAC-SHA2-256, HMAC-SHA2-384, HMAC-SHA2-512, HMAC-SHA2-512/224, HMAC-SHA2-512/256, HMAC-SHA3-224, HMAC-SHA3-256, HMAC-SHA3-384, HMAC-SHA3-512</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">fixedDataOrder</td>
<td valign="top" align="left">The counter locations supported by the KDF.</td>
<td valign="top" align="left">array of string</td>
<td valign="top" align="left">none, before fixed data, after fixed data, before iterator</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">counterLength</td>
<td valign="top" align="left">The counter lengths supported for the KDF.</td>
<td valign="top" align="left">array of integer</td>
<td valign="top" align="left">8, 16, 24, 32</td>
<td valign="top" align="left">Not optional for counter mode.</td>
</tr><tr><td valign="top" align="left">supportedLengths</td>
<td valign="top" align="left">The supported derivation lengths.</td>
<td valign="top" align="left">domain</td>
<td valign="top" align="left">Single range (of literal) expected.  Registered value must support the L value provided.</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">supportsEmptyIv</td>
<td valign="top" align="left">The KDF supports an empty IV (feedback mode).</td>
<td valign="top" align="left">boolean</td>
<td valign="top" align="left">true, false</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">requiresEmptyIv</td>
<td valign="top" align="left">The KDF requires an empty IV (feedback mode).</td>
<td valign="top" align="left">boolean</td>
<td valign="top" align="left">true, false</td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>
</clause>
</clause>

<clause id="keyconfirmmethod" obligation="normative">
<title>Supported KeyConfirmation Method</title>
<table id="_b8b49fb6-99af-e413-5f8f-5ff5021b7859">
<name>KAS ECC KeyConfirmation Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">macMethods</td>
<td valign="top" align="left">The MAC methods to use when testing KAS or KTS schemes with key confirmation.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left"><xref target="supmacmet"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyConfirmationDirections</td>
<td valign="top" align="left">The directions in which key confirmation is supported.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">unilateral, bilateral</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyConfirmationRoles</td>
<td valign="top" align="left">The roles in which key confirmation is supported.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">provider, recipient</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>

<clause id="fixedinfopatcon" obligation="normative">
<title>FixedInfoPatternConstruction</title>
<p id="_4063ce58-aee8-5270-2359-fa9493e76138">IUTs <strong>MUST</strong> be capable of specifying how the FixedInfo is constructed for the KAS/KTS negotiation. Note that for the purposes of testing against the ACVP system, both uPartyInfo and vPartyInfo are <strong>REQUIRED</strong> to be registered within the fixed info pattern.</p>

<p id="_a5c92cd8-2fc3-7456-fdff-61f65b57efea">Pattern candidates:</p>

<ul id="_072e8fd5-24f1-e0a1-cebb-2410a3a2a854"><li><p id="_73d0e5ec-fc55-a9bb-ccd2-0dfa8b9c95ed">literal[0123456789ABCDEF]</p>
<ul id="_a7a1a5f0-b6f3-1192-6f61-3dc6d2f62de5"><li><p id="_4e75292e-c423-36f4-c7b0-58486642f98c">uses the specified hex within “[]”. literal[0123456789ABCDEF]
substitutes “0123456789ABCDEF” in place of the field</p>
</li>
</ul>
</li>
<li><p id="_36e07348-979f-72f3-61ef-31dac752d23d">uPartyInfo</p>
<ul id="_3a7e4c4f-3818-dd27-3b13-c5095b1e7bf8"><li><p id="_00c74de5-5a39-4afe-1f59-0ff7fd256928">uPartyId { || ephemeralKey } { || ephemeralNonce } { || dkmNonce } { || c }</p>
<ul id="_8fc9590b-2e44-efe6-296b-2086a60732b3"><li><p id="_343409f6-5646-97d6-892c-54ee2e0e1d53">“optional” items such as ephemeralKey <strong>MUST</strong> be included when available for ACVP testing.</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p id="_60652329-d410-6865-9766-9cbba91331ec">vPartyInfo</p>
<ul id="_4968325e-5b72-0155-c3ba-dee652e5a4f2"><li><p id="_d94425ba-e151-1c3c-1747-98976edff2b4">vPartyId { || ephemeralKey } { || ephemeralNonce } { || dkmNonce } { || c }</p>
<ul id="_01a521e9-a5b2-4ff6-9048-7b98b6fdca07"><li><p id="_5b100e9a-867a-85ec-4f1e-c4ffcf9b9592">“optional” items such as ephemeralKey <strong>MUST</strong> be included when available for ACVP testing.</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p id="_54f64745-4850-9a89-8a1a-27058d7dab77">context</p>
<ul id="_6eb9c2b0-ce51-fd72-98d0-109da7f371fb"><li><p id="_94271796-0659-c4b7-522d-b922704a96bb">Random value chosen by ACVP server to represent the context.</p>
</li>
</ul>
</li>
<li><p id="_da2e2ce6-384c-c240-72b9-faa29be8b028">algorithmId</p>
<ul id="_c23055b0-90c0-ec80-f0b7-8d30e7a6da5d"><li><p id="_d71817a6-f35e-5c90-770c-c8d76cb5923b">Random value chosen by ACVP server to represent the
algorithmId.</p>
</li>
</ul>
</li>
<li><p id="_6a6605b6-6bfc-c856-7959-4c891cdebb3a">label</p>
<ul id="_8331e65e-e8a2-7ea7-ab11-45ed82a565b5"><li><p id="_cc679039-6393-58f9-134b-3953a47f712f">Random value chosen by ACVP server to represent the label.</p>
</li>
</ul>
</li>
<li><p id="_5e84f666-209a-d824-1636-797ebefbd59c">l</p>
<ul id="_0de9ea38-9443-45a4-5d4d-fd428a8e59ca"><li><p id="_a95fa978-d85d-b4a7-8cb8-3e0799a510e6">The length of the derived keying material in bits, <strong>MUST</strong> be represented in 32 bits for ACVP testing.</p>
</li>
</ul>
</li>
</ul>

<p id="_5052820b-2899-5b7d-bc77-00513120f98c">Example (Note that party U is the server in this case “434156536964”, party V is the IUT “a1b2c3d4e5”):</p>

<ul id="_45552322-a3d8-d3bb-5399-6c76111b60c4"><li><p id="_d2bba350-dc2b-3d45-672b-c1af4fe8b535">“concatenation” : “literal[123456789CAFECAFE]||uPartyInfo||vPartyInfo”</p>
</li>
</ul>

<p id="_2d57922f-93d2-9db1-2751-8c1756e967b7">Evaluated as:</p>

<ul id="_311c065b-0479-15bc-197f-a4641618a027"><li><p id="_9fd0aeb4-9982-8bb9-0297-55ec8c90c48b">“123456789CAFECAFE434156536964a1b2c3d4e5”</p>
</li>
</ul>
</clause>

<clause id="supmacmet" obligation="normative">
<title>Supported MAC Methods</title>
<p id="_07d3d407-c650-50f2-0829-bf43cf9dea60">Note that AT LEAST one mac method must be supplied when making use of Key Confirmation.</p>

<table id="_6801802b-16a0-ae2e-e593-907c58d7d407">
<name>MAC Method Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">CMAC</td>
<td valign="top" align="left">Utilizes CMAC as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/>.  Note that the keyLen must be 128, 192, or 256 for this MAC.</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA-1</td>
<td valign="top" align="left">Utilizes HMAC-SHA-1 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-224</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-224 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-256</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-256 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-384</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-384 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-512</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-512 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-512/224</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-512/224 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-512/256</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-512/256 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA3-224</td>
<td valign="top" align="left">Utilizes HMAC-SHA3-224 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA3-256</td>
<td valign="top" align="left">Utilizes HMAC-SHA3-256 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA3-384</td>
<td valign="top" align="left">Utilizes HMAC-SHA3-384 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA3-512</td>
<td valign="top" align="left">Utilizes HMAC-SHA3-512 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">KMAC-128</td>
<td valign="top" align="left">Utilizes KMAC-128 as the MAC algorithm. Note that a customization string of “KC” is used for the function when KMAC is utilized for Key Confirmation.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">KMAC-256</td>
<td valign="top" align="left">Utilizes KMAC-256 as the MAC algorithm. Note that a customization string of “KC” is used for the function when KMAC is utilized for Key Confirmation.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>

<clause id="supmacopt" obligation="normative">
<title>Supported MAC Options</title>
<table id="_05bfad81-37b2-69b8-5f15-ce42653b7995">
<name>MAC Method Base Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">keyLen</td>
<td valign="top" align="left">The amount of bits from the DKM to pass into the KeyConfirmation MAC function.</td>
<td valign="top" align="left">integer</td>
<td valign="top" align="left">128 — 512.  Note that the DKM is <strong>REQUIRED</strong> to have at least 8 bits available after subtracting the keyLen specified.</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macLen</td>
<td valign="top" align="left">The amount of bits to use as the tag from the MAC function.</td>
<td valign="top" align="left">integer</td>
<td valign="top" align="left">64 — 512.</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>
</clause>
</clause>
</clause>

<clause id="app-reg-ex" obligation="normative">
<title>Example KAS-ECC Registration</title>
<p id="_f5bb7980-642a-2b97-88a2-e1ce85f9b18d">The following is a example JSON object advertising support for KAS ECC.</p>

<sourcecode id="_b53016ea-f2c1-f999-22e2-25d6c2cdb893" lang="json">{
  "algorithm": "KAS-ECC",
  "revision": "Sp800-56Ar3",
  "prereqVals": [
    {
      "algorithm": "ECDSA",
      "valValue": "123456"
    },
    {
      "algorithm": "DRBG",
      "valValue": "123456"
    },
    {
      "algorithm": "SHA",
      "valValue": "123456"
    },
    {
      "algorithm": "KMAC",
      "valValue": "123456"
    },
    {
      "algorithm": "HMAC",
      "valValue": "123456"
    }
  ],
  "function": [
    "keyPairGen",
    "partialVal"
  ],
  "iutId": "123456ABCD",
  "scheme": {
    "ephemeralUnified": {
      "kasRole": [
        "initiator",
        "responder"
      ],
      "kdfMethods": {
        "oneStepKdf": {
          "auxFunctions": [
            {
              "auxFunctionName": "KMAC-128",
              "macSaltMethods": [
                "default"
              ]
            }
          ],
          "fixedInfoPattern": "algorithmId||l||uPartyInfo||vPartyInfo",
          "encoding": [
            "concatenation"
          ]
        },
        "oneStepNoCounterKdf": {
          "auxFunctions": [
            {
              "auxFunctionName": "KMAC-128",
              "l": 256,
              "macSaltMethods": [
                "default"
              ]
            }
          ],
          "fixedInfoPattern": "algorithmId||l||uPartyInfo||vPartyInfo",
          "encoding": [
            "concatenation"
          ]
        },
        "twoStepKdf": {
          "capabilities": [
            {
              "macSaltMethods": [
                "random"
              ],
              "fixedInfoPattern": "l||label||uPartyInfo||vPartyInfo||context",
              "encoding": [
                "concatenation"
              ],
              "kdfMode": "feedback",
              "macMode": [
                "HMAC-SHA3-224"
              ],
              "supportedLengths": [
                512
              ],
              "fixedDataOrder": [
                "after fixed data"
              ],
              "counterLength": [
                32
              ],
              "requiresEmptyIv": false,
              "supportsEmptyIv": false
            }
          ]
        }
      },
      "l": 512
    },
    "onePassDh": {
      "kasRole": [
        "initiator",
        "responder"
      ],
      "kdfMethods": {
        "oneStepKdf": {
          "auxFunctions": [
            {
              "auxFunctionName": "KMAC-128",
              "macSaltMethods": [
                "default"
              ]
            }
          ],
          "fixedInfoPattern": "algorithmId||l||uPartyInfo||vPartyInfo",
          "encoding": [
            "concatenation"
          ]
        },
        "twoStepKdf": {
          "capabilities": [
            {
              "macSaltMethods": [
                "random"
              ],
              "fixedInfoPattern": "l||label||uPartyInfo||vPartyInfo||context",
              "encoding": [
                "concatenation"
              ],
              "kdfMode": "feedback",
              "macMode": [
                "HMAC-SHA3-224"
              ],
              "supportedLengths": [
                512
              ],
              "fixedDataOrder": [
                "after fixed data"
              ],
              "counterLength": [
                32
              ],
              "requiresEmptyIv": false,
              "supportsEmptyIv": false
            }
          ]
        }
      },
      "keyConfirmationMethod": {
        "macMethods": {
          "KMAC-128": {
            "keyLen": 128,
            "macLen": 128
          }
        },
        "keyConfirmationDirections": [
          "unilateral"
        ],
        "keyConfirmationRoles": [
          "provider",
          "recipient"
        ]
      },
      "l": 512
    }
  },
  "domainParameterGenerationMethods": [
    "P-224"
  ]
}</sourcecode>

</clause>
</clause>

<clause id="generation_reqs_per_scheme" obligation="normative">
<title>Generation Requirements per Party per Scheme</title>
<p id="_b9b38d4c-7af6-6fee-b6b2-9170d4e0b672">The various schemes of KAS all have their own requirements as to keys and nonces per scheme, per party. The below table demonstrates those generation requirements:</p>

<table id="scheme_generation_requirements">
<name>Required Party Generation Obligations</name>
<thead><tr><th valign="top" align="left">Scheme</th>
<th valign="top" align="left">KasMode</th>
<th valign="top" align="left">KasRole</th>
<th valign="top" align="left">KeyConfirmationRole</th>
<th valign="top" align="left">KeyConfirmationDirection</th>
<th valign="top" align="left">StaticKeyPair</th>
<th valign="top" align="left">EphemeralKeyPair</th>
<th valign="top" align="left">EphemeralNonce</th>
<th valign="top" align="left">DkmNonce</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">fullMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">ephemeralUnified</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">ephemeralUnified</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">ephemeralUnified</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">ephemeralUnified</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassMqv</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassDh</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassDh</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassDh</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassDh</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassDh</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">onePassDh</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">NoKdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfNoKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">None</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">InitiatorPartyU</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Provider</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Unilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr><tr><td valign="top" align="left">staticUnified</td>
<td valign="top" align="left">KdfKc</td>
<td valign="top" align="left">ResponderPartyV</td>
<td valign="top" align="left">Recipient</td>
<td valign="top" align="left">Bilateral</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
<td valign="top" align="left">True</td>
<td valign="top" align="left">False</td>
</tr></tbody>
</table>
</clause>

<clause id="test-vectors" obligation="normative">
<title>Test Vectors</title>
<p id="_2df1e99f-039e-03ef-6ffe-fb242b4808ca">The ACVP server provides test vectors to the ACVP client, which are then processed and returned to the ACVP server for validation. A typical ACVP validation test session would require multiple test vector sets to be downloaded and processed by the ACVP client. Each test vector set represents an individual algorithm defined during the capability exchange. This section describes the JSON schema for a test vector set used with SP800-56Ar3 KAS ECC algorithms.</p>

<p id="_f20358a6-1915-581f-f00b-4b9d90dee7f9">The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire vector set as well as individual test vectors to be processed by the ACVP client. The following table describes the JSON elements at the top level of the hierarchy.</p>

<table id="_1fd83ac4-0cef-724e-db5a-f879db32c22f">
<name>Top Level Test Vector JSON Elements</name>
<thead><tr><th valign="top" align="left">JSON Values</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">acvVersion</td>
<td valign="top" align="left">Protocol version identifier</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">vsId</td>
<td valign="top" align="left">Unique numeric vector set identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">Algorithm defined in the capability exchange</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">mode</td>
<td valign="top" align="left">Mode defined in the capability exchange</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">Protocol test revision selected</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">Array of test groups containing test data, see <xref target="tgjs"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_1815f35f-c46a-081f-8f30-35622ccda965">An example of this would look like this</p>

<sourcecode id="_dc8326ad-07f1-e726-5968-bc5dcf9a3ee5" lang="json">{
  "acvVersion": "version",
  "vsId": 1,
  "algorithm": "Alg1",
  "mode": "Mode1",
  "revision": "Revision1.0",
  "testGroups": [ ... ]
}</sourcecode>


<clause id="tgjs" obligation="normative">
<title>Test Groups JSON Schema</title>
<p id="_aae88f93-d541-6407-4030-bd088d04d5e7">The testGroups element at the top level in the test vector JSON object is an array of test groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</p>

<p id="_4033c1df-01e6-4e4f-c17e-8dd0846fe221">The test group for KAS/KTS ECC is as follows:</p>

<table id="vs_tg_table5">
<name>Vector Group JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">Numeric identifier for the test group, unique across the entire vector set.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">testType</td>
<td valign="top" align="left">The type of test for the group (AFT or VAL).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">scheme</td>
<td valign="top" align="left">The scheme in use for the group. See <xref target="supported_schemes"/> for possible values.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">kasRole</td>
<td valign="top" align="left">The group role from the perspective of the IUT.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left"/><td valign="top" align="left"> The length of key to derive/transport.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">iutId</td>
<td valign="top" align="left">The Iut’s identifier.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">serverId</td>
<td valign="top" align="left">The ACVP server’s identifier.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">kdfConfiguration</td>
<td valign="top" align="left">The KDF configuration for the group.</td>
<td valign="top" align="left">Object, See <xref target="kdfconfig"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macConfiguration</td>
<td valign="top" align="left">The MAC configuration for the group.</td>
<td valign="top" align="left">Object, See <xref target="macconfig"/></td>
<td valign="top" align="left">Not optional for schemes using key confirmation.</td>
</tr><tr><td valign="top" align="left">keyConfirmationDirection</td>
<td valign="top" align="left">The key confirmation direction.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">keyConfirmationRole</td>
<td valign="top" align="left">The key confirmation role.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">domainParameterGenerationMode</td>
<td valign="top" align="left">The domain parameter type used.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">The tests for the group.</td>
<td valign="top" align="left">Array of objects, See <xref target="tvjs"/>.</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<clause id="kdfconfig" obligation="normative">
<title>KDF Configuration JSON Schema</title>
<p id="_1df17a4e-8723-8752-8ca9-c955f46deb7f">Describes the KDF configuration for use under the test group.</p>

<table id="_1495143e-2eb0-ff82-db5f-746adf4fc21a">
<name>KdfConfiguration JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">kdfType</td>
<td valign="top" align="left">The type of KDF to use for the group.</td>
<td valign="top" align="left">value — oneStep, oneStepNoCounter, twoStep</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">saltMethod</td>
<td valign="top" align="left">The strategy used for salting.</td>
<td valign="top" align="left">value — default (all 00s), random</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">fixedInfoPattern</td>
<td valign="top" align="left">The pattern used for constructing the fixedInfo.</td>
<td valign="top" align="left">value — See <xref target="fixedinfopatcon"/>.</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">fixedInfoEncoding</td>
<td valign="top" align="left">The pattern used for constructing the fixedInfo.</td>
<td valign="top" align="left">value — See <xref target="fixedinfopatcon"/>.</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">auxFunction</td>
<td valign="top" align="left">The auxiliary function used in the KDF.</td>
<td valign="top" align="left">value — See <xref target="auxfunc"/>.</td>
<td valign="top" align="left">Not optional for OneStepKdf.</td>
</tr><tr><td valign="top" align="left">macMode</td>
<td valign="top" align="left">The MAC function used in the KDF.</td>
<td valign="top" align="left">value — See <xref target="twostepcapcap"/>.</td>
<td valign="top" align="left">Not optional for TwoStepKdf.</td>
</tr><tr><td valign="top" align="left">counterLocation</td>
<td valign="top" align="left">The counter location.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">counterLen</td>
<td valign="top" align="left">The counter length.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ivLen</td>
<td valign="top" align="left">The iv length.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>
</clause>

<clause id="macconfig" obligation="normative">
<title>MAC Configuration JSON Schema</title>
<p id="_0f4d2b06-78f5-1126-f8cd-3f175cd805c4">Describes the key confirmation MAC configuration for use under the test group.</p>

<table id="_a56503d4-ce6d-f17f-f7b6-37b834a0da1e">
<name>MacConfiguration JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">macType</td>
<td valign="top" align="left">The macType used in key confirmation.</td>
<td valign="top" align="left">value — HMAC-SHA2-224, HMAC-SHA2-256, HMAC-SHA2-384, HMAC-SHA2-512, HMAC-SHA2-512/224, HMAC-SHA2-512/256, HMAC-SHA3-224, HMAC-SHA3-256, HMAC-SHA3-384, HMAC-SHA3-512, CMAC, KMAC-128, KMAC-256</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyLen</td>
<td valign="top" align="left">The number of bits to take from the DKM to use for the mac key in key confirmation.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macLen</td>
<td valign="top" align="left">The number of bits to use for the MAC tag.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>
</clause>

<clause id="tvjs" obligation="normative">
<title>Test Case JSON Schema</title>
<p id="_cda88248-c3c7-94cf-61b4-7ccf6d93730a">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each KAS/KTS ECC test vector.</p>

<table id="vs_tc_table5">
<name>Test Case JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">ephemeralPublicKeyIutX</td>
<td valign="top" align="left">The IUT’s ephemeral public key X value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralPublicKeyIutY</td>
<td valign="top" align="left">The IUT’s ephemeral public key Y value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">staticPublicKeyIutX</td>
<td valign="top" align="left">The IUT’s static public key X value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">staticPublicKeyIutY</td>
<td valign="top" align="left">The IUT’s static public key Y value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralPublicKeyServerX</td>
<td valign="top" align="left">The Server’s ephemeral public key X value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralPublicKeyServerY</td>
<td valign="top" align="left">The Server’s ephemeral public key Y value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">staticPublicKeyServerX</td>
<td valign="top" align="left">The Server’s static public key X value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">staticPublicKeyServerY</td>
<td valign="top" align="left">The Server’s static public key Y value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">dkmNonceIut</td>
<td valign="top" align="left">The IUT’s nonce used in static schemes for Key Confirmation.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralNonceIut</td>
<td valign="top" align="left">The IUT’s ephemeral nonce used in some schemes.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">dkmNonceServer</td>
<td valign="top" align="left">The Server’s nonce used in static schemes for Key Confirmation.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralNonceServer</td>
<td valign="top" align="left">The Server’s ephemeral nonce used in some schemes.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">staticPrivateKeyIut</td>
<td valign="top" align="left">The IUT’s static private key.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralPrivateKeyIut</td>
<td valign="top" align="left">The IUT’s ephemeral private key.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">kdfParameter</td>
<td valign="top" align="left">The KDF parameters for this test case.</td>
<td valign="top" align="left">value — See <xref target="kdfparms"/>.</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">dkm</td>
<td valign="top" align="left">The derived keying material.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">tag</td>
<td valign="top" align="left">The tag generated as a part of key conformation (from the IUT perspective).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>

<clause id="kdfparms" obligation="normative">
<title>KDF Parameter JSON Schema</title>
<p id="_ef2942e6-5ccd-8fc7-8e51-2af5e073be5f">KDF specific options used for the test case.</p>

<table id="_498b515c-4a20-7b6e-3c7f-bfaa061f1363">
<name>KDF Parameter JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">kdfType</td>
<td valign="top" align="left">The type of KDF utilized.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">salt</td>
<td valign="top" align="left">The salt used for the test case.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">iv</td>
<td valign="top" align="left">The iv used for the test case.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">algorithmId</td>
<td valign="top" align="left">The random “algorithID” used for the test case when applicable to the fixedInfo pattern.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">context</td>
<td valign="top" align="left">The random “context” used for the test case when applicable to the fixedInfo pattern.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">label</td>
<td valign="top" align="left">The random “label” used for the test case when applicable to the fixedInfo pattern.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>
</clause>
</clause>

<clause id="app-vs-ex" obligation="normative">
<title>Example Test Vectors JSON Object KAS-FFC</title>
<p id="_2ce244ec-f311-7b13-20af-34af4ffa4a78">The following is a example JSON object for KAS-FFC test vectors sent from the ACVP server to the crypto module.</p>

<sourcecode id="_f5ff9ae1-cf33-1524-bd4d-a52ac82bb377" lang="json">{
  "vsId": 0,
  "algorithm": "KAS-ECC",
  "revision": "Sp800-56Ar3",
  "testGroups": [
    {
      "tgId": 1,
      "testType": "AFT",
      "tests": [
        {
          "staticPublicServerX": "B7A4DDA5DC3A317647B39F39E05390A88F12F53861C24635",
          "staticPublicServerY": "CA2776BF6A0F35B727F3057340E89A1600915B81BB2E87B7",
          "tcId": 1,
          "ephemeralNonceServer": "44588073AACC3CFD6C9A5E2A0973B6BDDFC35F67EEA96FD0B070DF05F24A4B381F05CE9ACC67739B157CF8EE7459A64E",
          "kdfParameter": {
            "kdfType": "oneStep",
            "salt": "00000000000000000000000000000000",
            "algorithmId": "A51CF275ABE573209CBC606A934352FE"
          }
        }
      ],
      "domainParameterGenerationMode": "P-224",
      "scheme": "staticUnified",
      "kasRole": "initiator",
      "l": 512,
      "iutId": "123456ABCD",
      "serverId": "434156536964",
      "kdfConfiguration": {
        "kdfType": "oneStep",
        "saltMethod": "default",
        "fixedInfoPattern": "algorithmId||l||uPartyInfo||vPartyInfo",
        "fixedInfoEncoding": "concatenation",
        "auxFunction": "KMAC-128"
      },
      "macConfiguration": {
        "macType": "KMAC-128",
        "keyLen": 128,
        "macLen": 128
      },
      "keyConfirmationDirection": "unilateral",
      "keyConfirmationRole": "provider"
    },
    {
      "tgId": 2,
      "testType": "VAL",
      "tests": [
        {
          "staticPublicServerX": "87F6D507656EBC3D4D655FD4C0F13BE0F98D5B7472A3B247",
          "staticPublicServerY": "CFBC8EE38F4EF2DF1B97BF410ABCF4968F1115E7B80E34C6",
          "staticPrivateIut": "F43B6F08F570D469ED31CF920516114B1B5E3C3C7BDD6B14",
          "staticPublicIutX": "7573E06C6BACA56D5AFD08A1A014776BDDA7F4593645A07D",
          "staticPublicIutY": "93D0C1CDC5C23BD045AD6258448436A55E3C310B4333F551",
          "tcId": 21,
          "ephemeralNonceServer": "6F4C587D3CEF0B1D0D5B359B18FFB8B72C879EB3997E768826552082D56931D965E7F315FD7254C434871FA1E160873F",
          "dkmNonceIut": "AB5CCC3B75AA1FB85D28D5D53126B362AAABA3C51D427B6D138BEFD7EE636E1BC239FB45630BF6D7F0E80B59835916B9",
          "kdfParameter": {
            "kdfType": "oneStep",
            "salt": "00000000000000000000000000000000",
            "algorithmId": "342BCBC9DE15458BCA294BD16FFA10A7"
          },
          "dkm": "B9FDC93EA0B6A7906C6DB8EC17475B3073A8AD1C24CB1287AB8A6AEA46CABA4FDFD7B0CB77F74CDCF3DFF8DCC41560CF",
          "tag": "3279D63C9192B7FEF71F6735921B3B46"
        }
      ],
      "domainParameterGenerationMode": "P-224",
      "scheme": "staticUnified",
      "kasRole": "initiator",
      "l": 512,
      "iutId": "123456ABCD",
      "serverId": "434156536964",
      "kdfConfiguration": {
        "kdfType": "oneStep",
        "saltMethod": "default",
        "fixedInfoPattern": "algorithmId||l||uPartyInfo||vPartyInfo",
        "fixedInfoEncoding": "concatenation",
        "auxFunction": "KMAC-128"
      },
      "macConfiguration": {
        "macType": "KMAC-128",
        "keyLen": 128,
        "macLen": 128
      },
      "keyConfirmationDirection": "unilateral",
      "keyConfirmationRole": "provider"
    }
  ]
}</sourcecode>

</clause>
</clause>

<clause id="vector_responses" obligation="normative">
<title>Test Vector Responses</title>
<p id="_3892a373-3c32-e6c4-17ae-43376e4c6871">After the ACVP client downloads and processes a vector set, it <strong>MUST</strong> send the response vectors back to the ACVP server. The following table describes the JSON object that represents a vector set response.</p>

<table id="vr_top_table">
<name>Vector Set Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">acvVersion</td>
<td valign="top" align="left">Protocol version identifier</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">vsId</td>
<td valign="top" align="left">Unique numeric identifier for the vector set</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">Array of JSON objects that represent each test vector group. See <xref target="vr_group_table"/>.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<p id="_f41d76d2-9023-e30c-681e-62ef8ca0e2d7">The testGroups section is used to organize the ACVP client response in a similar manner to how it receives vectors. Several algorithms <strong>SHALL</strong> require the client to send back group level properties in their response. This structure helps accommodate that.</p>

<table id="vr_group_table">
<name>Vector Set Group Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group Id</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">Array of JSON objects that represent each test vector group.  See <xref target="vr_tc_table"/>.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<p id="_cb75f9e7-835e-d8e5-55a3-bd0f097eb0cc">The testCase section is used to organize the ACVP client response in a similar manner to how it receives vectors.  Several algorithms <strong>SHALL</strong> require the client to send back group level properties in their response.  This structure helps accommodate that.</p>

<table id="vr_tc_table">
<name>Vector Set Test Case Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">The test case Id</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">testPassed</td>
<td valign="top" align="left">Used in VAL test types, should the KAS/KTS negotiation have succeeded?</td>
<td valign="top" align="left">boolean</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralPublicKeyIutX</td>
<td valign="top" align="left">The IUT’s ephemeral public key X value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralPublicKeyIutY</td>
<td valign="top" align="left">The IUT’s ephemeral public key Y value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">staticPublicKeyIutX</td>
<td valign="top" align="left">The IUT’s static public key X value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">staticPublicKeyIutX</td>
<td valign="top" align="left">The IUT’s static public key Y value.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">dkmNonceIut</td>
<td valign="top" align="left">The IUT’s nonce used in static schemes for Key Confirmation.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">ephemeralNonceIut</td>
<td valign="top" align="left">The IUT’s ephemeral nonce used in some schemes.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">dkm</td>
<td valign="top" align="left">The derived keying material.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">tag</td>
<td valign="top" align="left">The tag generated as a part of key confirmation (from the IUT perspective).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>

<clause id="app-results-ex" obligation="normative">
<title>Example Test Results KAS-ECC JSON Object</title>
<p id="_25e1305d-b826-7a33-394f-ab54bf0a7dac">The following is an example JSON object for KAS-ECC test results sent from the crypto module to the ACVP server.</p>

<sourcecode id="_5dc5c1b4-c122-45ad-c685-cc5cc80f64d9" lang="json">[
  {
    "acvVersion": "version"
  },
  {
    "vsId": 0,
    "algorithm": "KAS-ECC",
    "revision": "Sp800-56Ar3",
    "testGroups": [
      {
        "tgId": 1,
        "tests": [
          {
            "staticPublicIutX": "ED9CF3FE1B79D014F7FF60DFDBFC19457C4F3EBEB0BB10B5",
            "staticPublicIutY": "5CA8819BC0D39E67AE9AB4747DC563ADA1AE1E9DBA12C272",
            "tcId": 1,
            "dkmNonceIut": "215D9AB3A371B395802FD0FCD97815EDFC468DC631735BAEEA0F18498EFC3B52BBABD2B953DE7B64EF20D899093B031D",
            "dkm": "56505307C7F11F4640C96D863FA3634120F2B2CAB262AE29B1CD26252BC1537E84DF3EB75C1E240983B599B30690F9B0",
            "tag": "CE39683069F0DA7624F72086FB4B2B8E"
          }
        ]
      },
      {
        "tgId": 3,
        "tests": [
          {
            "tcId": 21,
            "testPassed": true
          }
        ]
      }
    ]
  }
]</sourcecode>

</clause>
</clause>

<clause id="eccComp" obligation="normative">
<title>ECC CDH Component Test</title>
<p id="_50a5ed1d-2020-a09c-0dc8-96681e2a591f">The ECC CDH Component Test for SP800-56Ar3</p>

<clause id="eccCompCap" obligation="normative">
<title>ECC CDH Component Capabilities JSON Values</title>
<p id="_6e311c4c-4bb9-8606-72a9-1901dbfab882">Each algorithm capability advertised is a self-contained JSON object using the following values.</p>

<table id="eccComp_caps_table">
<name>KAS ECC Component Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">The algorithm under test</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">KAS-ECC</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">mode</td>
<td valign="top" align="left">The algorithm mode</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">CDH-Component</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">The algorithm testing revision to use.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">“Sp800-56Ar3”</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">prereqVals</td>
<td valign="top" align="left">Prerequisite algorithm validations</td>
<td valign="top" align="left">array of prereqAlgVal objects</td>
<td valign="top" align="left">See <xref target="prereq_algs"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">function</td>
<td valign="top" align="left">Type of function supported</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">See <xref target="supported_functions"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">curve</td>
<td valign="top" align="left">Array of supported curves</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">P-224, P-256, P-384, P-521, K-233, K-283, K-409, K-571, B-233, B-283, B-409, B-571</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<clause id="app-eccComponent-reg-ex" obligation="normative">
<title>Example KAS ECC CDH-Component Capabilities JSON Object</title>
<p id="_845e1e13-4337-fc30-0a9c-8264d8de07fb">The following is a example JSON object advertising support for KAS ECC CDH-Component.</p>

<sourcecode id="_579e5916-d322-587c-f59b-f586a30e1cab" lang="json">{
	"algorithm": "KAS-ECC",
	"mode": "CDH-Component",
	"revision": "Sp800-56Ar3",
	"prereqVals": [{
		"algorithm": "ECDSA",
		"valValue": "123456"
	}],
	"function": ["keyPairGen"],
	"curve": ["P-224", "K-233", "B-233"]
}</sourcecode>

</clause>
</clause>

<clause id="eccCompVectors" obligation="normative">
<title>ECC CDH Component TestVectors JSON Values</title>
<table id="eccComp_vector_table">
<name>KAS ECC CDH Component TestVectors JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">The algorithm under test</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">KAS-ECC</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">mode</td>
<td valign="top" align="left">The algorithm mode under test</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">CDH-Component</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">The algorithm testing revision to use.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">“Sp800-56Ar3”</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">Array of individual test group JSON objects, which are defined in <xref target="eccCompTestGroup"/></td>
<td valign="top" align="left">Array</td>
<td valign="top" align="left">Array of test group information</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<clause id="eccCompTestGroup" obligation="normative">
<title>ECC CDH Component TestGroup JSON Values</title>
<table id="eccComp_testGroup_table">
<name>KAS ECC CDH Component TestGroup JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">testType</td>
<td valign="top" align="left">The test type expected within the group. AFT is the only valid value for ECC Component.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">AFT</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">curve</td>
<td valign="top" align="left">The curve used in the test group</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">P-224, P-256, P-384, P-521, K-233, K-283, K-409, K-571, B-233, B-283, B-409, B-571</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">Array of individual test vector JSON objects, which are defined in <xref target="eccCompTestCase"/></td>
<td valign="top" align="left">array</td>
<td valign="top" align="left"/><td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>

<clause id="eccCompTestCase" obligation="normative">
<title>ECC CDH Component TestCase JSON Values</title>
<table id="eccComp_testCase_table">
<name>KAS ECC CDH Component TestCase JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">publicServerX</td>
<td valign="top" align="left">The X coordinate of the server’s public key</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">publicServerY</td>
<td valign="top" align="left">The Y coordinate of the server’s public key</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">publicIutX</td>
<td valign="top" align="left">The X coordinate of the iut’s public key</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">publicIutY</td>
<td valign="top" align="left">The Y coordinate of the iut’s public key</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left"/><td valign="top" align="left">The shared secret Z</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>

<clause id="app-eccComponent-vs-ex" obligation="normative">
<title>Example KAS ECC CDH-Component Test Vectors JSON Object</title>
<p id="_4a309fd4-64bb-ea7a-e266-5a98ec0d3161">The following is a example JSON object for KAS ECC CDH-Component test vectors sent from the ACVP server to the crypto module.</p>

<sourcecode id="_35e9a259-62dc-1da3-221d-b7b5b170196f" lang="json">[{
		"acvVersion": "1.0"
	},
	{
		"vsId": 1750,
		"algorithm": "KAS-ECC",
		"mode": "CDH-Component",
		"revision": "Sp800-56Ar3",
		"testGroups": [{
				"tgId": 1,
				"testType": "AFT",
				"curve": "P-192",
				"tests": [{
					"tcId": 1,
					"publicServerX": "CAEF2CBA796BB7FC143D3EAED698C26AAE6F6F79DF3974EE",
					"publicServerY": "03ED6D7A90637629DBCEBFF4A2D1D771D9D4CF9F0D88CE90"
				}]
			},
			{
				"tgId": 2,
				"testType": "AFT",
				"curve": "K-163",
				"tests": [{
					"tcId": 26,
					"publicServerX": "048C46D674E1218D0BD3C9FCD120ECE8B4DB7310E7",
					"publicServerY": "ED3EEDB656E035C779081090BE44B743E857E3B4"
				}]
			},
			{
				"tgId": 3,
				"testType": "AFT",
				"curve": "B-163",
				"tests": [{
					"tcId": 51,
					"publicServerX": "8EE7C8F08BF47B21CA2FE911B721651B90E52391",
					"publicServerY": "0461DF3646E95598EAE4F5C6A634E71006ABC6FE1F"
				}]
			}
		]
	}
]</sourcecode>

</clause>
</clause>

<clause id="cdh_vector_responses" obligation="normative">
<title>KAS CDH-Component Test Vector Responses</title>
<p id="_13356f1b-ba44-1059-0bbc-c34c94d750fe">After the ACVP client downloads and processes a vector set, it must send the response vectors back to the ACVP server. The following table describes the JSON object that represents a vector set response.</p>

<clause id="vr_cdh_top_table" obligation="normative">
<title>CDH Component Vector Set Response JSON Object</title>
<table id="_6a589208-3dae-42e3-1da8-ea0aa9bab65d">
<name>CDH Component Vector Set Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">acvVersion</td>
<td valign="top" align="left">Protocol version identifier</td>
<td valign="top" align="left">value</td>
</tr><tr><td valign="top" align="left">vsId</td>
<td valign="top" align="left">Unique numeric identifier for the vector set</td>
<td valign="top" align="left">value</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">Array of JSON objects that represent each test vector group. See <xref target="vr_cdh_group_table"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_0d80a97f-3562-cf9f-9cbc-87a7aed1b2d1">The testGroups section is used to organize the ACVP client response in a similar manner to how it receives vectors. Several algorithms <strong>SHALL</strong> require the client to send back group level properties in their response. This structure helps accommodate that.</p>
</clause>

<clause id="vr_cdh_group_table" obligation="normative">
<title>CDH Component Vector Set Group Response JSON Object</title>
<table id="_93e29a25-7d86-04c5-1345-d7ced32142de">
<name>CDH Component Vector Set Group Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group Id</td>
<td valign="top" align="left">value
 tests</td>
</tr></tbody>
</table>

<p id="_5d907534-5d77-d45c-d03e-fbfc8c1f3dc7">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DRBG test vector.</p>
</clause>

<clause id="vs_tr_table" obligation="normative">
<title>CDH Component Test Case Results JSON Object</title>
<table id="_efef12d5-c54b-be33-d63c-a47a5d1e440e">
<name>CDH Component Test Case Results JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">publicIutX</td>
<td valign="top" align="left">x value of the IUT public key</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">publicIutY</td>
<td valign="top" align="left">x value of the IUT public key</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left"/><td valign="top" align="left">Computed shared secret Z</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>
</clause>

<clause id="app-eccComponent-results-ex" obligation="normative">
<title>Example KAS ECC CDH Component Test Results JSON Object</title>
<p id="_36023a75-9abc-aa61-a94e-9dd4add2daba">The following is a example JSON object for KAS ECC CDH Component test results sent from the crypto module to the ACVP server.</p>

<sourcecode id="_027f0604-0802-b7e5-7ce8-4014b239e61e" lang="json">[{
		"acvVersion": "1.0"
	},
	{
		"vsId": 1750,
		"testGroups": [{
				"tgId": 1,
				"tests": [{
					"tcId": 1,
					"publicIutX": "DB9FBC84CBAD3EED42C31CDBF2882041634D040219C3E47A",
					"publicIutY": "9BD672733BCCEF2BD805E97FF9BBFE0FFC003BEEEF56868B",
					"z": "8BEAEA60DFAC075F9F25A5CFEA39818D98D3EA4B9D4C34A8"
				}]
			},
			{
				"tgId": 2,
				"tests": [{
					"tcId": 26,
					"publicIutX": "058C593D1D4E8238102BDE6B497218D92F8EDD2997",
					"publicIutY": "0437682E4608984EFC7FB619FB260EF27CAF704D7B",
					"z": "075D9A831E0665521D613AEAA59B8C8CDFBAC8C683"
				}]
			},
			{
				"tgId": 3,
				"tests": [{
					"tcId": 51,
					"publicIutX": "04128CD094F6988AA26DA2B100A71A31214CC9C50B",
					"publicIutY": "01A3A88C9F0987E488922573D0A31D300532F0B268",
					"z": "07EC896621BF1703EB7567196ED1DE5742C4695990"
				}]
			}
		]
	}
]</sourcecode>

</clause>
</clause>

<clause id="security" obligation="normative">
<title>Security Considerations</title>
<p id="_e72f7b42-317f-eca2-dca5-61a804236779">There are no additional security considerations outside of those outlined in the ACVP document.</p>
</clause>








</sections><annex id="_a69faed8-72b0-3ba2-8728-4efb8b3de77f" obligation="normative">
<title>Terminology</title><p id="_0fead3bd-6602-8ff7-26a3-91a6f54a2df7">For the purposes of this document, 
    the following terms and definitions apply.</p>

<terms id="_terminology" obligation="normative"><term id="term-prompt"><preferred><expression>
<name>Prompt</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_0b557dee-263e-4f77-95e9-effe4bb7b245">JSON sent from the server to the client describing the tests the client performs</p></verbal-definition></definition>
 </term>

<term id="term-registration"><preferred><expression>
<name>Registration</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_fd9d44c2-d80c-b8c9-e54d-a345307c3227">The initial request from the client to the server describing the capabilities of one or several algorithm, mode and revision combinations</p></verbal-definition></definition>
 </term>

<term id="term-response"><preferred><expression>
<name>Response</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_7141f0b4-e069-2580-7d4e-58d944b295b4">JSON sent from the client to the server in response to the prompt</p></verbal-definition></definition>
 </term>

<term id="term-test-case"><preferred><expression>
<name>Test Case</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_f5aa3c23-1c50-23a0-f38f-5661147245cb">An individual unit of work within a prompt or response</p></verbal-definition></definition>
 </term>

<term id="term-test-group"><preferred><expression>
<name>Test Group</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_e293c586-8957-6b9c-bc20-375ddf7ac7b5">A collection of test cases that share similar properties within a prompt or response</p></verbal-definition></definition>
 </term>

<term id="term-test-vector-set"><preferred><expression>
<name>Test Vector Set</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_274d6fe2-0abe-6115-5815-7f543599c6cb">A collection of test groups under a specific algorithm, mode, and revision</p></verbal-definition></definition>
 </term>

<term id="term-validation"><preferred><expression>
<name>Validation</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_9f021253-06cb-319b-ea31-449b15931bba">JSON sent from the server to the client that specifies the correctness of the response</p></verbal-definition></definition>
 </term>
</terms>
</annex><annex id="_abbreviations_and_acronyms" obligation="normative">
<title>Abbreviations and Acronyms</title>
<dl id="_d66f4c46-c5ba-2213-c2a5-b7f607d787ad"><dt>ACVP</dt>
<dd><p id="_ed531f01-1c98-8f04-b45e-2d823d328d1e">Automated Crypto Validation Protocol</p>
</dd>
<dt>JSON</dt>
<dd><p id="_bd4c53ce-6ff7-b6a0-c505-23ab08e1ae8b">Javascript Object Notation</p>
</dd>
</dl>
</annex><annex id="_revision_history" obligation="normative">
<title>Revision History</title>
<table id="_a6f2b131-b23c-4be0-8a5c-3e4944b6a639"><thead><tr><th valign="top" align="left">Version</th>
<th valign="top" align="left">Release Date</th>
<th valign="top" align="left">Updates</th>
</tr></thead>
<tbody><tr><td valign="top" align="left"><p id="_dd070661-ee3a-67c3-b6d9-1acfa0738831">1</p>
</td>
<td valign="top" align="left"><p id="_308e6703-3f27-5567-6be6-e0b00cd88b6a">2020-01-31</p>
</td>
<td valign="top" align="left"><p id="_23bc1989-c26b-f9b7-497a-154aa516bf4f">Initial Release</p>
</td>
</tr></tbody>
</table>
</annex><annex id="_a177f361-adef-749d-0f48-e9a17ca20bc0" obligation="normative">
<title>References</title>
<references id="_normative_references" normative="true" obligation="informative"> <bibitem id="RFC2119" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Key words for use in RFCs to Indicate Requirement Levels</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.2119.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc2119</uri>  <docidentifier type="RFC" primary="true">RFC 2119</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC2119</docidentifier>  <docidentifier type="DOI">10.17487/RFC2119</docidentifier>  <docnumber>RFC2119</docnumber>  <date type="published">    <on>1997-03</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">S. Bradner</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_f1934d05-bf02-c42b-3c26-c0f190e29321">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">BCP</title>
    <number>14</number>  </series>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>2119</number>  </series></bibitem>
 <bibitem id="RFC3526" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">More Modular Exponential (MODP) Diffie-Hellman groups for Internet Key Exchange (IKE)</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.3526.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc3526</uri>  <docidentifier type="RFC" primary="true">RFC 3526</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC3526</docidentifier>  <docidentifier type="DOI">10.17487/RFC3526</docidentifier>  <docnumber>RFC3526</docnumber>  <date type="published">    <on>2003-05</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">T. Kivinen</completename>      </name>
    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">M. Kojo</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_eca20a6b-5683-35ae-efa1-10b82ce1c886">This document defines new Modular Exponential (MODP) Groups for the Internet Key Exchange (IKE) protocol. It documents the well known and used 1536 bit group 5, and also defines new 2048, 3072, 4096, 6144, and 8192 bit Diffie-Hellman groups numbered starting at 14. The selection of the primes for theses groups follows the criteria established by Richard Schroeppel. [STANDARDS-TRACK]</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>3526</number>  </series></bibitem>
 <bibitem id="RFC7919" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for Transport Layer Security (TLS)</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.7919.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc7919</uri>  <docidentifier type="RFC" primary="true">RFC 7919</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC7919</docidentifier>  <docidentifier type="DOI">10.17487/RFC7919</docidentifier>  <docnumber>RFC7919</docnumber>  <date type="published">    <on>2016-08</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">D. Gillmor</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_81a00adc-2fb1-56de-23ff-f3a7a5a1d9b2">Traditional finite-field-based Diffie-Hellman (DH) key exchange during the Transport Layer Security (TLS) handshake suffers from a number of security, interoperability, and efficiency shortcomings. These shortcomings arise from lack of clarity about which DH group parameters TLS servers should offer and clients should accept. This document offers a solution to these shortcomings for compatible peers by using a section of the TLS “Supported Groups Registry” (renamed from “EC Named Curve Registry” by this document) to establish common finite field DH parameters with known structure and a mechanism for peers to negotiate support for these groups.</p>
    <p id="_4ad444eb-07ad-c489-471c-f831f3788c8b">This document updates TLS versions 1.0 (RFC 2246), 1.1 (RFC 4346), and 1.2 (RFC 5246), as well as the TLS Elliptic Curve Cryptography (ECC) extensions (RFC 4492).</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>7919</number>  </series></bibitem>
 <bibitem id="RFC7991" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">The “xml2rfc” Version 3 Vocabulary</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.7991.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc7991</uri>  <docidentifier type="RFC" primary="true">RFC 7991</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC7991</docidentifier>  <docidentifier type="DOI">10.17487/RFC7991</docidentifier>  <docnumber>RFC7991</docnumber>  <date type="published">    <on>2016-12</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">P. Hoffman</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_e66e5db0-2bfe-5f71-3c13-164b60814b2b">This document defines the “xml2rfc” version 3 vocabulary: an XML-based language used for writing RFCs and Internet-Drafts. It is heavily derived from the version 2 vocabulary that is also under discussion. This document obsoletes the v2 grammar described in RFC 7749.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>7991</number>  </series></bibitem>
 <bibitem id="RFC8174" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.8174.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc8174</uri>  <docidentifier type="RFC" primary="true">RFC 8174</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC8174</docidentifier>  <docidentifier type="DOI">10.17487/RFC8174</docidentifier>  <docnumber>RFC8174</docnumber>  <date type="published">    <on>2017-05</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">B. Leiba</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_04a5b64f-0b14-6f59-36e8-790bebde6e56">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">BCP</title>
    <number>14</number>  </series>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>8174</number>  </series></bibitem>
 <bibitem id="FIPS186-4" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Digital Signature Standard (DSS)</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/fips/186/4/final</uri>  <uri type="doi">https://doi.org/10.6028/NIST.FIPS.186-4</uri>  <docidentifier type="NIST" primary="true">FIPS 186-4</docidentifier>  <date type="published">    <on>2013-07</on>  </date>  <date type="issued">    <on>2013-07</on>  </date>  <contributor>    <role type="author"/>    <organization>      
<name>National Institute of Standards and Technology</name>
    </organization>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>active</substage>  </status>  <copyright>    <from>2013</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <relation type="obsoletes">    <description format="text/plain" language="en" script="Latn">supersedes</description>    <bibitem>      <formattedref format="text/plain" language="en" script="Latn">FIPS 186-3</formattedref>      <uri type="src">https://csrc.nist.gov/publications/detail/fips/186/3/archive/2009-06-25</uri>    </bibitem>
  </relation>  <place>Gaithersburg, MD</place>  <keyword>computer security</keyword>  <keyword>cryptography</keyword>  <keyword>Digital Signature Algorithm</keyword>  <keyword>digital signatures</keyword>  <keyword>Elliptic Curve Digital Signature Algorithm</keyword>  <keyword>Federal Information Processing Standard</keyword>  <keyword>public key cryptography</keyword></bibitem>
 <bibitem id="SP800-108" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Recommendation for Key Derivation Using Pseudorandom Functions (Revised)</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-108/final</uri>  <uri type="doi">https://doi.org/10.6028/NIST.SP.800-108</uri>  <docidentifier type="NIST" primary="true">SP 800-108</docidentifier>  <date type="published">    <on>2009-10</on>  </date>  <date type="issued">    <on>2009-10</on>  </date>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Lily Chen</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>active</substage>  </status>  <copyright>    <from>2009</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <relation type="obsoletes">    <description format="text/plain" language="en" script="Latn">supersedes</description>    <bibitem>      <formattedref format="text/plain" language="en" script="Latn">SP 800-108</formattedref>      <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-108/archive/2008-11-06</uri>    </bibitem>
  </relation>  <place>Gaithersburg, MD</place>  <keyword>key derivation</keyword>  <keyword>pseudorandom function.</keyword></bibitem>
 <bibitem id="SP800-56Ar3" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56a/rev-3/final</uri>  <uri type="doi">https://doi.org/10.6028/NIST.SP.800-56Ar3</uri>  <docidentifier type="NIST" primary="true">SP 800-56A Rev. 3</docidentifier>  <date type="published">    <on>2018-04</on>  </date>  <date type="issued">    <on>2018-04</on>  </date>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Elaine B. Barker</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Lily Chen</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Allen Roginsky</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Apostol Vassilev</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Richard Davis</completename>      </name>
      <affiliation>        <organization>          
<name>National Security Agency</name>
          <abbreviation>NSA</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>active</substage>  </status>  <copyright>    <from>2018</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <relation type="obsoletes">    <description format="text/plain" language="en" script="Latn">supersedes</description>    <bibitem>      <formattedref format="text/plain" language="en" script="Latn">SP 800-56A Rev. 2</formattedref>      <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56a/rev-2/archive/2013-06-05</uri>    </bibitem>
  </relation>  <place>Gaithersburg, MD</place>  <keyword>Diffie-Hellman</keyword>  <keyword>elliptic curve cryptography</keyword>  <keyword>finite field cryptography</keyword>  <keyword>key agreement</keyword>  <keyword>key confirmation</keyword>  <keyword>key derivation</keyword>  <keyword>key establishment</keyword>  <keyword>MQV</keyword></bibitem>
 <bibitem id="SP800-56Cr1" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Recommendation for Key-Derivation Methods in Key-Establishment Schemes</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56c/rev-1/archive/2018-04-16</uri>  <uri type="doi">https://doi.org/10.6028/NIST.SP.800-56Cr1</uri>  <docidentifier type="NIST" primary="true">SP 800-56C Rev. 1</docidentifier>  <date type="published">    <on>2018-04</on>  </date>  <date type="obsoleted">    <on>2020-08</on>  </date>  <date type="issued">    <on>2018-04</on>  </date>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Elaine B. Barker</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Lily Chen</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Richard Davis</completename>      </name>
      <affiliation>        <organization>          
<name>National Security Agency</name>
          <abbreviation>NSA</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>withdrawn</substage>  </status>  <copyright>    <from>2018</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <relation type="obsoletes">    <description format="text/plain" language="en" script="Latn">supersedes</description>    <bibitem>      <formattedref format="text/plain" language="en" script="Latn">SP 800-56C</formattedref>      <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56c/archive/2011-11-28</uri>    </bibitem>
  </relation>  <relation type="updates">    <bibitem>      <formattedref format="text/plain" language="en" script="Latn">SP 800-56C Rev. 2</formattedref>      <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56c/rev-2/final</uri>    </bibitem>
  </relation>  <place>Gaithersburg, MD</place>  <keyword>expansion</keyword>  <keyword>extraction</keyword>  <keyword>extraction-then-expansion</keyword>  <keyword>key establishment</keyword>  <keyword>message authentication code</keyword>  <keyword>hash function</keyword>  <keyword>key derivation</keyword></bibitem>

<bibitem id="ACVP">
  <fetched>2022-03-15</fetched>
  <title type="title-main" format="text/plain">Automatic Cryptographic Validation Protocol</title>
  <title type="main" format="text/plain">Automatic Cryptographic Validation Protocol</title>
  <docidentifier>ACVP</docidentifier>
  <date type="published">
    <on>2019-07-01</on>
  </date>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>B.</initial>
        <surname>Fussell</surname>
      </name>
      <affiliation>
        <organization>
          <name>Cisco</name>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>A.</initial>
        <surname>Vassilev</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>H.</initial>
        <surname>Booth</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>C.</initial>
        <surname>Celi</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>R.</initial>
        <surname>Hammett</surname>
      </name>
      <affiliation>
        <organization>
          <name>Huntington Ingalls Industries</name>
          <abbreviation>HII</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="publisher"/>
    <organization>
      <name>National Institute of Standards and Technology</name>
      <abbreviation>NIST</abbreviation>
    </organization>
  </contributor>
</bibitem>
</references>
</annex>
</nist-standard>
