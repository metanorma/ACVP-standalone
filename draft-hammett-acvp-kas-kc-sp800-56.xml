<?xml version="1.0" encoding="UTF-8"?>
<nist-standard xmlns="https://www.metanorma.org/ns/nist" type="semantic" version="2.0.5">
<bibdata type="standard">
<title language="en" format="text/plain" type="main">ACVP KAS KC SP 800-56 JSON Specification</title>

<title language="en" format="text/plain" type="short-title">ACVP KAS KC SP 800-56 JSON Specification</title>
<uri type="email">algotest@list.nist.gov</uri><uri type="doi">https://doi.org/10.6028/NIST.CSRC.AVCP.KAS-KDF-TwoStep</uri><docidentifier type="NIST">ACVP KAS-KDF-KCSP800-56 Revision 1</docidentifier><docidentifier type="nist-long">Automated Cryptographic Validation Protocol KAS-KDF-KCSP800-56 Revision 1</docidentifier><docidentifier type="nist-mr">NIST.CSRC.ACVP.KAS-KDF-KCSP800-56.r-1.eng</docidentifier><docnumber>KAS-KDF-KCSP800-56</docnumber><date type="issued"><on>2021-07-22</on></date><contributor><role type="author"/><person>
<name><completename>Russell Hammett</completename></name>
<affiliation><organization>
<name>HII Technical Solutions Division</name>
<address><formattedAddress>302 Sentinel Drive, Suite #300, Annapolis Junction, MD 20701</formattedAddress></address></organization></affiliation></person></contributor><contributor><role type="publisher"/><organization>
<name>National Institute of Standards and Technology</name>
<subdivision>Computer Security Division, Information Technology Laboratory</subdivision></organization></contributor><edition>Revision 1</edition><language>en</language><script>Latn</script><abstract><p>This document defines the JSON schema for testing SP800-56 KAS KC implementations with the ACVP specification.</p>
</abstract><status><stage>final</stage><substage>active</substage></status><copyright><from>2021</from><owner><organization>
<name>National Institute of Standards and Technology</name>
</organization></owner></copyright><series type="main">
<title>NIST Cybersecurity Technical Specification</title>
<abbreviation>NIST CSTS</abbreviation></series><series type="secondary">
<title>Automated Cryptographic Validation Protocol</title>
<abbreviation>ACVP</abbreviation></series><keyword>ACVP</keyword><keyword>cryptography</keyword><ext><doctype>standard</doctype></ext></bibdata>
<boilerplate>


  <legal-statement>

<clause id="authority3">
<title>Disclaimer</title>
<p id="_863aa6ce-5a57-69b6-7fbf-9ed44a41c5ea">Any mention of commercial products or reference to commercial organizations is for information only; it does not imply recommendation or endorsement by NIST, nor does it imply that the products mentioned are necessarily the best available for the purpose.</p>
</clause>

<clause id="authority3a">
  <title>Additional Information</title>
  <p id="_c686fd53-3de8-7756-9855-01ef6116c4ac">For additional information on NIST’s Cybersecurity programs, projects and publications, visit the <link target="https://csrc.nist.gov">Computer Security Resource Center</link>. Information on other efforts at <link target="https://www.nist.gov">NIST</link> and in the <link target="https://www.nist.gov/itl">Information Technology Laboratory</link> (ITL) is also available.</p>
</clause>
</legal-statement>

<feedback-statement>
  

<clause id="authority5">
  <p align="center" id="_3c964232-2209-46b9-23ff-8d9dbf50f7e3"><strong>Comments on this publication may be submitted to:</strong></p>

<p align="center" id="_fd3e950b-c15e-6309-a933-da7ca17fced9">National Institute of Standards and Technology <br/>
  Attn: Computer Security Division, Information Technology Laboratory <br/>
  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 <br/>
  
  Email: <link target="mailto:algotest@list.nist.gov"/>
  </p>

<p align="center" id="_98da11c8-716c-a4a5-0c72-942c806716f3">All comments are subject to release under the Freedom of Information Act (FOIA).</p>
</clause>
</feedback-statement>
</boilerplate>
<preface><abstract id="_abstract"><title>Abstract</title><p id="_5e8947e5-86ce-3b75-0f98-e7ae99d78af2">This document defines the JSON schema for testing SP800-56 KAS KC implementations with the ACVP specification.</p>
</abstract></preface><sections>
<clause id="introduction" obligation="normative">
<title>Introduction</title>
<p id="_05b5e27a-d57f-7dd2-0850-9ccea42019e1">The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing SP800-56 KAS KC implementations using ACVP.</p>
</clause>

<clause id="supported" obligation="normative">
<title>Supported KAS-KCs</title>
<p id="_c1c22e5d-d403-aeba-a2e1-2341b8a93d2d">The following key derivation functions <strong>MAY</strong> be advertised by the ACVP compliant cryptographic module:</p>

<ul id="_eb8bbfa2-cff7-7992-9239-0db5ba2d2ed0"><li><p id="_a728e53e-ef02-fde1-84b6-a6146842d76c">KAS-KC / null / Sp800-56</p>
</li>
</ul>
</clause>

<clause id="testtypes" obligation="normative">
<title>Test Types and Test Coverage</title>
<p id="_6c2d1b9e-7eb9-1c43-9752-59b2f8676d04">The ACVP server performs a set of tests on the KAS protocol in order to assess the correctness and robustness of the implementation. A typical ACVP validation session <strong>SHALL</strong> require multiple tests to be performed for every supported permutation of KAS capabilities. This section describes the design of the tests used to validate implementations of KAS algorithms.</p>

<clause id="_test_types" obligation="normative">
<title>Test Types</title>
<p id="_d1d64d9e-d40c-8f5d-d282-61262687cc38">There are two test types for KAS testing:</p>

<ul id="_730fdf5e-d7aa-164b-bd41-057abe902f3a"><li><p id="_c5f78f57-00ac-8f09-fdd6-3522e577a260">“AFT” — Algorithm Function Test. In the AFT test mode, the IUT <strong>SHALL</strong> act as a party in the Key Confirmation with the ACVP server. The server <strong>SHALL</strong> generate and provide all necessary information for the IUT to perform a successful key confirmation; both the server and IUT <strong>MAY</strong> act as party U/V, as well as recipient/provider to key confirmation.</p>
</li>
</ul>
</clause>

<clause id="_test_coverage" obligation="normative">
<title>Test Coverage</title>
<p id="_790e90fc-a808-cb2f-0590-c5ba20fa5686">The tests described in this document have the intention of ensuring an implementation is conformant to <eref type="inline" bibitemid="SP800-56Ar3" citeas="SP 800-56A Rev. 3"/> and <eref type="inline" bibitemid="SP800-56Br2" citeas="SP 800-56B Rev. 2"/> Key Confirmation.</p>

<clause id="requirements_covered" obligation="normative">
<title>Requirements Covered</title>
<ul id="_acc512f3-5942-2e4d-f3d6-8aa5aca7e7b6"><li><p id="_3150c650-f9be-a6ae-e60f-28a4b3c4ed92">SP 800-56Ar3 / SP 800-56Br2 — 5.1 Cryptographic Hash Functions.  SHA1, SHA2, and SHA3 hash functions <strong>SHALL</strong> be available for the various pieces of KAS requiring use of a hash function; such as approved MACs and OneStep KDF.</p>
</li>
<li><p id="_64d92c16-2a20-ebe5-582c-b9218bc3896b">SP 800-56Ar3 / SP 800-56Br2 — 5.2 Message Authentication Code (MAC) Algorithms.  AES-CMAC, HMAC, and KMAC algorithms <strong>SHALL</strong> be available for testing under Key Confirmation as the specification states.</p>
</li>
<li><p id="_8826ae1f-d7a8-43eb-6440-f609b5788d45">SP 800-56Ar3 — 5.3 Random Number Generation / SP800-56Br2 — 5.3 Random Bit Generators.  Though random values are used, the testing of the construction of those random values <strong>SHALL NOT</strong> be in scope of ACVP testing.</p>
</li>
<li><p id="_52bc0ce3-74be-a856-00ef-2700922ee572">SP 800-56Ar3 / SP800-56Br2 — 5.4 Nonces.  Though nonces are used, the testing of the construction of those nonces <strong>SHALL NOT</strong> be in scope of ACVP testing.</p>
</li>
<li><p id="_a35256d1-6bf9-e6e8-c6ef-4f184e3135e8">SP 800-56Ar3 — 5.9 KeyConfirmation / SP 800-56Br2 — 5.6 Key Confirmation.  The ACVP server <strong>SHALL</strong> support key confirmation for applicable KAS and KTS schemes.</p>
</li>
</ul>
</clause>

<clause id="requirements_not_covered" obligation="normative">
<title>KAS-FFC Requirements Not Covered</title>
<ul id="_d0d34914-5c8e-b897-0eb1-672547d3be80"><li><p id="_cfa40bbf-51df-7f7c-03fe-54477e914062">SP 800-56Ar3 / SP 800-56Br2 Sections that aren’t applicable to Key Confirmation <strong>SHALL NOT</strong> be in the scope of testing covered under this document, for this algorithm.</p>
</li>
</ul>
</clause>
</clause>
</clause>

<clause id="capabilities" obligation="normative">
<title>Capabilities Registration</title>
<p id="_8b94ae32-51fa-7cdf-716f-5abe8ba411e0">ACVP requires crypto modules to register their capabilities. This allows the crypto module to advertise support for specific algorithms, notifying the ACVP server which algorithms need test vectors generated for the validation process.  This section describes the constructs for advertising support of KAS KC algorithms to the ACVP server.</p>

<p id="_e83f2311-d713-25d1-f1d9-e2e8ae4204ff">The algorithm capabilities <strong>MUST</strong> be advertised as JSON objects within the ‘algorithms’ value of the ACVP registration message. The ‘algorithms’ value is an array, where each array element is an individual JSON object defined in this section. The ‘algorithms’ value is part of the ‘capability_exchange’ element of the ACVP JSON registration message. See the ACVP specification <eref type="inline" bibitemid="ACVP" citeas="ACVP"/> for more details on the registration message.</p>

<clause id="prerequisites" obligation="normative">
<title>Prerequisites</title>
<p id="_eecbb4b2-6f7f-8408-2ee1-b41ca76bd504">Each algorithm implementation <strong>MAY</strong> rely on other cryptographic primitives.	For example, RSA Signature algorithms depend on an underlying hash function. Each of these underlying algorithm primitives must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</p>

<p id="_f7f16e22-e58b-43df-39ba-87d6ba6a7ad2">Prerequisites, if applicable, <strong>MUST</strong> be submitted in the registration as the <tt>prereqVals</tt> JSON property array inside each element of the <tt>algorithms</tt> array. Each element in the <tt>prereqVals</tt> array <strong>MUST</strong> contain the following properties</p>

<table id="_d4322f66-7335-d05d-c9ce-bc8545c49eaa">
<name>Prerequisite Properties</name>
<thead><tr><th valign="top" align="left">JSON Property</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">a prerequisite algorithm</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">valValue</td>
<td valign="top" align="left">algorithm validation number</td>
<td valign="top" align="left">string</td>
</tr></tbody>
</table>

<p id="_ed4b9036-78af-d8f8-7bd2-30af422f6d02">A “valValue” of “same” <strong>SHALL</strong> be used to indicate that the prerequisite is being met by a different algorithm in the capability exchange in the same registration.</p>

<p id="_e7955338-40d4-e44b-74b8-1f64ebffc1a4">An example description of prerequisites within a single algorithm capability exchange looks like this</p>

<sourcecode id="_89db1eb0-63dd-71b7-8bda-ebdf011fa2ba" lang="json">"prereqVals":
[
  {
    "algorithm": "Alg1",
    "valValue": "Val-1234"
  },
  {
    "algorithm": "Alg2",
    "valValue": "same"
  }
]</sourcecode>

</clause>

<clause id="prereq_algs" obligation="normative">
<title>Prerequisite Algorithms</title>
<p id="_3c4ddce9-7ec4-b859-b53a-54440160878c">Some algorithm implementations rely on other cryptographic primitives. For example, IKEv2 uses an underlying SHA algorithm. Each of these underlying algorithm primitives must be validated, either separately or as part of the same   submission. ACVP provides a mechanism for specifying the required prerequisites:</p>

<table id="rereqs_table">
<name>Prerequisite Algorithms JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">a prerequisite algorithm</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">CMAC, DRBG, DSA, HMAC, KMAC, SafePrimes, SHA, SP800-108</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">valValue</td>
<td valign="top" align="left">algorithm validation number</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">actual number or “same”</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">prereqAlgVal</td>
<td valign="top" align="left">prerequistie algorithm validation</td>
<td valign="top" align="left">object with algorithm and valValue properties</td>
<td valign="top" align="left">see above</td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>

<p id="_958b4d7b-94bb-c95e-86e7-b4faae21bbae">KAS has conditional prerequisite algorithms, depending on the capabilities registered:</p>

<table id="prereqs_requirements_table">
<name>Prerequisite requirement conditions</name>
<thead><tr><th valign="top" align="left">Prerequisite Algorithm</th>
<th valign="top" align="left">Condition</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">CMAC</td>
<td valign="top" align="left">CMAC validation <strong>REQUIRED</strong> when IUT is performing KeyConfirmation (KC) or a KDF and utilizing CMAC.</td>
</tr><tr><td valign="top" align="left">HMAC</td>
<td valign="top" align="left">HMAC validation <strong>REQUIRED</strong> when IUT is performing KeyConfirmation (KC) or a KDF and utilizing HMAC.</td>
</tr><tr><td valign="top" align="left">KMAC</td>
<td valign="top" align="left">KMAC validation <strong>REQUIRED</strong> when IUT is performing KeyConfirmation (KC) or a KDF and utilizing KMAC.</td>
</tr></tbody>
</table>
</clause>

<clause id="cap_ex" obligation="normative">
<title>Algorithm Capabilities JSON Values</title>
<p id="_ee418d96-2a8a-d7e4-1beb-a38dc6bf6e2a">Each algorithm capability advertised is a self-contained JSON object using the following values.</p>

<table id="caps_table">
<name>Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">The algorithm under test</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">“KAS-KC”</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">The algorithm testing revision to use.</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">“Sp800-56”</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">prereqVals</td>
<td valign="top" align="left">Prerequisite algorithm validations</td>
<td valign="top" align="left">array of prereqAlgVal objects</td>
<td valign="top" align="left">See <xref target="prereq_algs"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">kasRole</td>
<td valign="top" align="left">Roles supported for key agreement</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">initiator and/or responder</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyConfirmationMethod</td>
<td valign="top" align="left">The KeyConfirmation capabilities supported.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left"><xref target="keyconfirmmethod"/></td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>

<clause id="keyconfirmmethod" obligation="normative">
<title>Supported KeyConfirmation Method</title>
<table id="_13e75bd4-5903-a67b-0ce7-b5fe5a47ae6b">
<name>KAS FFC KeyConfirmation Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">macMethods</td>
<td valign="top" align="left">The MAC methods to use when testing KAS or KTS schemes with key confirmation.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left"><xref target="supmacmet"/></td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyConfirmationDirections</td>
<td valign="top" align="left">The directions in which key confirmation is supported.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">unilateral, bilateral</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyConfirmationRoles</td>
<td valign="top" align="left">The roles in which key confirmation is supported.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">provider, recipient</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>

<clause id="supmacmet" obligation="normative">
<title>Supported MAC Methods</title>
<p id="_8673508d-29c3-4aa7-84d3-27a407e1b728">Note that AT LEAST one mac method must be supplied when making use of Key Confirmation.</p>

<table id="_1d02491a-0dd7-5304-0875-30cf4c90ca80">
<name>MAC Method Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">CMAC</td>
<td valign="top" align="left">Utilizes CMAC as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/>.  Note that the keyLen must be 128, 192, or 256 for this MAC.</td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA-1</td>
<td valign="top" align="left">Utilizes HMAC-SHA-1 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-224</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-224 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-256</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-256 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-384</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-384 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-512</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-512 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-512/224</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-512/224 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA2-512/256</td>
<td valign="top" align="left">Utilizes HMAC-SHA2-512/256 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA3-224</td>
<td valign="top" align="left">Utilizes HMAC-SHA3-224 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA3-256</td>
<td valign="top" align="left">Utilizes HMAC-SHA3-256 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA3-384</td>
<td valign="top" align="left">Utilizes HMAC-SHA3-384 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">HMAC-SHA3-512</td>
<td valign="top" align="left">Utilizes HMAC-SHA3-512 as the MAC algorithm.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">KMAC-128</td>
<td valign="top" align="left">Utilizes KMAC-128 as the MAC algorithm. Note that a customization string of “KC” is used for the function when KMAC is utilized for Key Confirmation.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr><tr><td valign="top" align="left">KMAC-256</td>
<td valign="top" align="left">Utilizes KMAC-256 as the MAC algorithm. Note that a customization string of “KC” is used for the function when KMAC is utilized for Key Confirmation.</td>
<td valign="top" align="left">object</td>
<td valign="top" align="left">See <xref target="supmacopt"/></td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>

<clause id="supmacopt" obligation="normative">
<title>Supported MAC Options</title>
<table id="_552b7b45-41d2-b544-1fb4-34018c72093b">
<name>MAC Method Base Options</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">keyLen</td>
<td valign="top" align="left">The amount of bits from the DKM to pass into the KeyConfirmation MAC function.</td>
<td valign="top" align="left">integer</td>
<td valign="top" align="left">128 — 512.  Note that the DKM is <strong>Required</strong> to have at least 8 bits available after subtracting the keyLen specified.</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macLen</td>
<td valign="top" align="left">The amount of bits to use as the tag from the MAC function.</td>
<td valign="top" align="left">integer</td>
<td valign="top" align="left">64 — 512.</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>
</clause>
</clause>

<clause id="app-reg-ex" obligation="normative">
<title>Example Registration</title>
<p id="_f82292b0-960d-7a35-4ca1-e9e15f8e8312">The following is a example JSON object advertising support for KAS FFC.</p>

<sourcecode id="_62928bf7-b47e-0c69-6616-474134c7fec1" lang="json">{
  "algorithm": "KAS-KC",
  "revision": "Sp800-56",
  "kasRole": [
    "initiator",
    "responder"
  ],
  "keyConfirmationMethod": {
    "macMethods": {
      "KMAC-128": {
        "keyLen": 128,
        "macLen": 128
      }
    },
    "keyConfirmationDirections": [
      "unilateral",
      "bilateral"
    ],
    "keyConfirmationRoles": [
      "provider",
      "recipient"
    ]
  }
}</sourcecode>

</clause>
</clause>

<clause id="test-vectors" obligation="normative">
<title>Test Vectors</title>
<p id="_bb92c86f-3f57-3cbd-92b5-ceb6096a8aba">The ACVP server provides test vectors to the ACVP client, which are then processed and returned to the ACVP server for validation. A typical ACVP validation test session would require multiple test vector sets to be downloaded and processed by the ACVP client. Each test vector set represents an individual algorithm defined during the capability exchange. This section describes the JSON schema for a test vector set used with SP800-56 KAS KC algorithms.</p>

<p id="_0e170b93-f1f9-cd13-7197-acfc2470cd66">The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire vector set as well as individual test vectors to be processed by the ACVP client. The following table describes the JSON elements at the top level of the hierarchy.</p>

<table id="_c0dbfd16-5c5e-4fd2-b91f-8e7383367aa0">
<name>Top Level Test Vector JSON Elements</name>
<thead><tr><th valign="top" align="left">JSON Values</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">acvVersion</td>
<td valign="top" align="left">Protocol version identifier</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">vsId</td>
<td valign="top" align="left">Unique numeric vector set identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">Algorithm defined in the capability exchange</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">mode</td>
<td valign="top" align="left">Mode defined in the capability exchange</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">Protocol test revision selected</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">Array of test groups containing test data, see <xref target="tgjs"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_94c2d2c3-b635-9bd2-3289-0ad59c04f197">An example of this would look like this</p>

<sourcecode id="_7f2d9df0-7240-f758-832b-432668f72a4a" lang="json">{
  "acvVersion": "version",
  "vsId": 1,
  "algorithm": "Alg1",
  "mode": "Mode1",
  "revision": "Revision1.0",
  "testGroups": [ ... ]
}</sourcecode>


<clause id="tgjs" obligation="normative">
<title>Test Groups JSON Schema</title>
<p id="_8ca8ccd0-9d16-cd26-ab35-c8c2f8d8a4a8">The testGroups element at the top level in the test vector JSON object is an array of test groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</p>

<p id="_3cde8044-5521-55ff-cebe-ae749866e7f6">The test group for KAS/KTS FFC is as follows:</p>

<table id="vs_tg_table5">
<name>Vector Group JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">Numeric identifier for the test group, unique across the entire vector set.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">testType</td>
<td valign="top" align="left">The type of test for the group (AFT or VAL).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">kasRole</td>
<td valign="top" align="left">The group role from the perspective of the IUT.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyConfirmationDirection</td>
<td valign="top" align="left">The key confirmation direction.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyConfirmationRole</td>
<td valign="top" align="left">The key confirmation role.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyAgreementMacType</td>
<td valign="top" align="left">The MAC being used for key confirmation.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">keyLen</td>
<td valign="top" align="left">The length of the key to be used as the macKey.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macLen</td>
<td valign="top" align="left">The length of the MAC to be produced.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">The tests for the group.</td>
<td valign="top" align="left">Array of objects, See <xref target="tvjs"/>.</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>
</clause>

<clause id="tvjs" obligation="normative">
<title>Test Case JSON Schema</title>
<p id="_458f2064-82c3-e2fd-ef73-fcafa0b414f0">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each test vector.</p>

<table id="vs_tc_table5">
<name>Test Case JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macDataServer</td>
<td valign="top" align="left">The partyId and ephemeral data to be used from the ACVP server perspective.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macDataIut</td>
<td valign="top" align="left">The partyId and ephemeral data to be used from the IUT perspective.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">macKey</td>
<td valign="top" align="left">The macKey portion of the key confirmation.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">tag</td>
<td valign="top" align="left">The tag generated as a part of key confirmation (from the IUT perspective).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">Yes</td>
</tr></tbody>
</table>
</clause>

<clause id="app-vs-ex" obligation="normative">
<title>Example Test Vectors JSON Object</title>
<p id="_2e6fd4f8-a90f-373f-ce86-a33e0d9ddef7">The following is a example JSON object for test vectors sent from the ACVP server to the crypto module.</p>

<sourcecode id="_57a16fa8-72f2-8ba7-b6d2-410417c8fb97" lang="json">{
  "vsId": 0,
  "algorithm": "KAS-KC",
  "revision": "Sp800-56",
  "isSample": true,
  "testGroups": [
    {
      "tgId": 1,
      "testType": "AFT",
      "kasRole": "initiator",
      "keyConfirmationDirection": "bilateral",
      "keyConfirmationRole": "provider",
      "keyAgreementMacType": "CMAC",
      "keyLen": 256,
      "macLen": 64,
      "tests": [
        {
          "tcId": 1,
          "macDataServer": {
            "partyId": "3590EA2B8D8EE994684A0CE4385DD2D2",
            "ephemeralData": "3139B09E09434C5F294F20115C7EE97B5716C9188CA39D08807F3809ADD8AD05"
          },
          "macDataIut": {
            "partyId": "910C6FE518C33A22380BCD33EAA34A79",
            "ephemeralData": "AA380D7E3E49563B006DE8F224336B421137D3CB50BD69472FDD5299885F9637"
          },
          "macKey": "08E276F4BC4EAE5DE47C4DB92402E7338D2373CA4BE9A4B43338635E25C5C212"
        },
        {
          "tcId": 2,
          "macDataServer": {
            "partyId": "C19FE731C14EBB0EDE8ECF2C60086CEA"
          },
          "macDataIut": {
            "partyId": "88E6C06D57E5EAC600DDE7246AAF7408"
          },
          "macKey": "234ADECE1B99695BD1E539BED042ABC51C9B0D348ECBCF9C0E46F7B885857D71"
        },
        {
          "tcId": 3,
          "macDataServer": {
            "partyId": "5345535892D86B3BE9C57D57E6EB4EA6"
          },
          "macDataIut": {
            "partyId": "022376FC5CBDE150D754BE6C78D2C653"
          },
          "macKey": "6A9BFC7FC2E6013CE901D59C1DF7297B61FB6B945FF1D7C55217FA5FB54FC5BB"
        },
        {
          "tcId": 4,
          "macDataServer": {
            "partyId": "F30A8967854FED4C423ABBCAC2190D65"
          },
          "macDataIut": {
            "partyId": "B1B0408807E22EB93EFEF2FAFB418EEB",
            "ephemeralData": "242FD779A30DAEFE542F6832348640A2A8FC824990CFC5E5F1DA881237C7452D"
          },
          "macKey": "950E78377B63387216C45BBF8349C4DD536B03B26BF6E4D03E855379E9FA5B79"
        }
      ]
    }
  ]
}</sourcecode>

</clause>
</clause>

<clause id="vector_responses" obligation="normative">
<title>Test Vector Responses</title>
<p id="_e8765303-875a-1dd0-eb26-124d0f36c926">After the ACVP client downloads and processes a vector set, it <strong>MUST</strong> send the response vectors back to the ACVP server. The following table describes the JSON object that represents a vector set response.</p>

<table id="vr_top_table">
<name>Vector Set Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">acvVersion</td>
<td valign="top" align="left">Protocol version identifier</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">vsId</td>
<td valign="top" align="left">Unique numeric identifier for the vector set</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">Array of JSON objects that represent each test vector group. See <xref target="vr_group_table"/>.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<p id="_f4cfc48f-1b32-a66b-f82e-b34f051c5bde">The testGroups section is used to organize the ACVP client response in a similar manner to how it receives vectors. Several algorithms <strong>SHALL</strong> require the client to send back group level properties in their response. This structure helps accommodate that.</p>

<table id="vr_group_table">
<name>Vector Set Group Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group Id</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">Array of JSON objects that represent each test vector group.  See <xref target="vr_tc_table"/>.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<p id="_5b1fe5ed-2fac-528a-4742-edc893ca76d2">The testCase section is used to organize the ACVP client response in a similar manner to how it receives vectors.  Several algorithms <strong>SHALL</strong> require the client to send back group level properties in their response.  This structure helps accommodate that.</p>

<table id="vr_tc_table">
<name>Vector Set Test Case Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Optional</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">The test case Id</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr><tr><td valign="top" align="left">tag</td>
<td valign="top" align="left">The tag generated as a part of key confirmation (from the IUT perspective).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">No</td>
</tr></tbody>
</table>

<clause id="app-results-ex" obligation="normative">
<title>Example Test Results JSON Object</title>
<p id="_6839ed29-37bc-13c0-6dcd-55dbf42db6c0">The following is a example JSON object for test results sent from the crypto module to the ACVP server.</p>

<sourcecode id="_06599118-1114-5ca4-064a-a014bc51344f" lang="json">{
  "vsId": 0,
  "algorithm": "KAS-KC",
  "revision": "Sp800-56",
  "isSample": true,
  "testGroups": [
    {
      "tgId": 1,
      "tests": [
        {
          "tcId": 1,
          "tag": "35FA16A8F7CE4DD6"
        },
        {
          "tcId": 2,
          "tag": "7FD1AF7F1FF82F6C"
        },
        {
          "tcId": 3,
          "tag": "A1ABD89925631AC1"
        },
        {
          "tcId": 4,
          "tag": "BAABCDE5BFA9F3FA"
        }
      ]
    }
  ]
}</sourcecode>

</clause>
</clause>

<clause id="security" obligation="normative">
<title>Security Considerations</title>
<p id="_e00ec061-56a6-9331-9b16-9e2a17a53e3f">There are no additional security considerations outside of those outlined in the ACVP document.</p>
</clause>








</sections><annex id="_a69faed8-72b0-3ba2-8728-4efb8b3de77f" obligation="normative">
<title>Terminology</title><p id="_0fead3bd-6602-8ff7-26a3-91a6f54a2df7">For the purposes of this document, 
    the following terms and definitions apply.</p>

<terms id="_terminology" obligation="normative"><term id="term-prompt"><preferred><expression>
<name>Prompt</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_0b557dee-263e-4f77-95e9-effe4bb7b245">JSON sent from the server to the client describing the tests the client performs</p></verbal-definition></definition>
 </term>

<term id="term-registration"><preferred><expression>
<name>Registration</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_fd9d44c2-d80c-b8c9-e54d-a345307c3227">The initial request from the client to the server describing the capabilities of one or several algorithm, mode and revision combinations</p></verbal-definition></definition>
 </term>

<term id="term-response"><preferred><expression>
<name>Response</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_7141f0b4-e069-2580-7d4e-58d944b295b4">JSON sent from the client to the server in response to the prompt</p></verbal-definition></definition>
 </term>

<term id="term-test-case"><preferred><expression>
<name>Test Case</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_f5aa3c23-1c50-23a0-f38f-5661147245cb">An individual unit of work within a prompt or response</p></verbal-definition></definition>
 </term>

<term id="term-test-group"><preferred><expression>
<name>Test Group</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_e293c586-8957-6b9c-bc20-375ddf7ac7b5">A collection of test cases that share similar properties within a prompt or response</p></verbal-definition></definition>
 </term>

<term id="term-test-vector-set"><preferred><expression>
<name>Test Vector Set</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_274d6fe2-0abe-6115-5815-7f543599c6cb">A collection of test groups under a specific algorithm, mode, and revision</p></verbal-definition></definition>
 </term>

<term id="term-validation"><preferred><expression>
<name>Validation</name>
</expression>
</preferred>
<definition><verbal-definition><p id="_9f021253-06cb-319b-ea31-449b15931bba">JSON sent from the server to the client that specifies the correctness of the response</p></verbal-definition></definition>
 </term>
</terms>
</annex><annex id="_abbreviations_and_acronyms" obligation="normative">
<title>Abbreviations and Acronyms</title>
<dl id="_d66f4c46-c5ba-2213-c2a5-b7f607d787ad"><dt>ACVP</dt>
<dd><p id="_ed531f01-1c98-8f04-b45e-2d823d328d1e">Automated Crypto Validation Protocol</p>
</dd>
<dt>JSON</dt>
<dd><p id="_bd4c53ce-6ff7-b6a0-c505-23ab08e1ae8b">Javascript Object Notation</p>
</dd>
</dl>
</annex><annex id="_revision_history" obligation="normative">
<title>Revision History</title>
<table id="_9756f802-70f2-fc3d-a6f6-294718477750"><thead><tr><th valign="top" align="left">Version</th>
<th valign="top" align="left">Release Date</th>
<th valign="top" align="left">Updates</th>
</tr></thead>
<tbody><tr><td valign="top" align="left"><p id="_dd070661-ee3a-67c3-b6d9-1acfa0738831">1</p>
</td>
<td valign="top" align="left"><p id="_34410dcd-3b4b-59ba-93a6-6d91a3b313a5">2021-07-22</p>
</td>
<td valign="top" align="left"><p id="_23bc1989-c26b-f9b7-497a-154aa516bf4f">Initial Release</p>
</td>
</tr></tbody>
</table>
</annex><annex id="_ddb26470-11fe-29ba-f4ab-3bf1c50abb6c" obligation="normative">
<title>References</title>
<references id="_normative_references" normative="true" obligation="informative"> <bibitem id="RFC2119" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Key words for use in RFCs to Indicate Requirement Levels</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.2119.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc2119</uri>  <docidentifier type="RFC" primary="true">RFC 2119</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC2119</docidentifier>  <docidentifier type="DOI">10.17487/RFC2119</docidentifier>  <docnumber>RFC2119</docnumber>  <date type="published">    <on>1997-03</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">S. Bradner</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_f1934d05-bf02-c42b-3c26-c0f190e29321">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">BCP</title>
    <number>14</number>  </series>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>2119</number>  </series></bibitem>
 <bibitem id="RFC3526" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">More Modular Exponential (MODP) Diffie-Hellman groups for Internet Key Exchange (IKE)</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.3526.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc3526</uri>  <docidentifier type="RFC" primary="true">RFC 3526</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC3526</docidentifier>  <docidentifier type="DOI">10.17487/RFC3526</docidentifier>  <docnumber>RFC3526</docnumber>  <date type="published">    <on>2003-05</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">T. Kivinen</completename>      </name>
    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">M. Kojo</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_eca20a6b-5683-35ae-efa1-10b82ce1c886">This document defines new Modular Exponential (MODP) Groups for the Internet Key Exchange (IKE) protocol. It documents the well known and used 1536 bit group 5, and also defines new 2048, 3072, 4096, 6144, and 8192 bit Diffie-Hellman groups numbered starting at 14. The selection of the primes for theses groups follows the criteria established by Richard Schroeppel. [STANDARDS-TRACK]</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>3526</number>  </series></bibitem>
 <bibitem id="RFC7919" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Negotiated Finite Field Diffie-Hellman Ephemeral Parameters for Transport Layer Security (TLS)</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.7919.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc7919</uri>  <docidentifier type="RFC" primary="true">RFC 7919</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC7919</docidentifier>  <docidentifier type="DOI">10.17487/RFC7919</docidentifier>  <docnumber>RFC7919</docnumber>  <date type="published">    <on>2016-08</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">D. Gillmor</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_81a00adc-2fb1-56de-23ff-f3a7a5a1d9b2">Traditional finite-field-based Diffie-Hellman (DH) key exchange during the Transport Layer Security (TLS) handshake suffers from a number of security, interoperability, and efficiency shortcomings. These shortcomings arise from lack of clarity about which DH group parameters TLS servers should offer and clients should accept. This document offers a solution to these shortcomings for compatible peers by using a section of the TLS “Supported Groups Registry” (renamed from “EC Named Curve Registry” by this document) to establish common finite field DH parameters with known structure and a mechanism for peers to negotiate support for these groups.</p>
    <p id="_4ad444eb-07ad-c489-471c-f831f3788c8b">This document updates TLS versions 1.0 (RFC 2246), 1.1 (RFC 4346), and 1.2 (RFC 5246), as well as the TLS Elliptic Curve Cryptography (ECC) extensions (RFC 4492).</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>7919</number>  </series></bibitem>
 <bibitem id="RFC7991" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">The “xml2rfc” Version 3 Vocabulary</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.7991.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc7991</uri>  <docidentifier type="RFC" primary="true">RFC 7991</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC7991</docidentifier>  <docidentifier type="DOI">10.17487/RFC7991</docidentifier>  <docnumber>RFC7991</docnumber>  <date type="published">    <on>2016-12</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">P. Hoffman</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_e66e5db0-2bfe-5f71-3c13-164b60814b2b">This document defines the “xml2rfc” version 3 vocabulary: an XML-based language used for writing RFCs and Internet-Drafts. It is heavily derived from the version 2 vocabulary that is also under discussion. This document obsoletes the v2 grammar described in RFC 7749.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>7991</number>  </series></bibitem>
 <bibitem id="RFC8174" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.8174.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc8174</uri>  <docidentifier type="RFC" primary="true">RFC 8174</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC8174</docidentifier>  <docidentifier type="DOI">10.17487/RFC8174</docidentifier>  <docnumber>RFC8174</docnumber>  <date type="published">    <on>2017-05</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">B. Leiba</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_04a5b64f-0b14-6f59-36e8-790bebde6e56">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">BCP</title>
    <number>14</number>  </series>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>8174</number>  </series></bibitem>
 <bibitem id="SP800-56Ar3" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Recommendation for Pair-Wise Key-Establishment Schemes Using Discrete Logarithm Cryptography</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56a/rev-3/final</uri>  <uri type="doi">https://doi.org/10.6028/NIST.SP.800-56Ar3</uri>  <docidentifier type="NIST" primary="true">SP 800-56A Rev. 3</docidentifier>  <date type="published">    <on>2018-04</on>  </date>  <date type="issued">    <on>2018-04</on>  </date>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Elaine B. Barker</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Lily Chen</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Allen Roginsky</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Apostol Vassilev</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Richard Davis</completename>      </name>
      <affiliation>        <organization>          
<name>National Security Agency</name>
          <abbreviation>NSA</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>active</substage>  </status>  <copyright>    <from>2018</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <relation type="obsoletes">    <description format="text/plain" language="en" script="Latn">supersedes</description>    <bibitem>      <formattedref format="text/plain" language="en" script="Latn">SP 800-56A Rev. 2</formattedref>      <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56a/rev-2/archive/2013-06-05</uri>    </bibitem>
  </relation>  <place>Gaithersburg, MD</place>  <keyword>Diffie-Hellman</keyword>  <keyword>elliptic curve cryptography</keyword>  <keyword>finite field cryptography</keyword>  <keyword>key agreement</keyword>  <keyword>key confirmation</keyword>  <keyword>key derivation</keyword>  <keyword>key establishment</keyword>  <keyword>MQV</keyword></bibitem>
 <bibitem id="SP800-56Br2" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Recommendation for Pair-Wise Key-Establishment Using Integer Factorization Cryptography</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56b/rev-2/final</uri>  <uri type="doi">https://doi.org/10.6028/NIST.SP.800-56Br2</uri>  <docidentifier type="NIST" primary="true">SP 800-56B Rev. 2</docidentifier>  <date type="published">    <on>2019-03</on>  </date>  <date type="issued">    <on>2019-03</on>  </date>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Elaine B. Barker</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Lily Chen</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Allen Roginsky</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Apostol Vassilev</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Richard Davis</completename>      </name>
      <affiliation>        <organization>          
<name>National Security Agency</name>
          <abbreviation>NSA</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Scott Simon</completename>      </name>
      <affiliation>        <organization>          
<name>National Security Agency</name>
          <abbreviation>NSA</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>active</substage>  </status>  <copyright>    <from>2019</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <relation type="obsoletes">    <description format="text/plain" language="en" script="Latn">supersedes</description>    <bibitem>      <formattedref format="text/plain" language="en" script="Latn">SP 800-56B Rev. 1</formattedref>      <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-56b/rev-1/archive/2014-10-01</uri>    </bibitem>
  </relation>  <place>Gaithersburg, MD</place>  <keyword>assurances</keyword>  <keyword>integer factorization cryptography</keyword>  <keyword>key agreement</keyword>  <keyword>key confirmation</keyword>  <keyword>key derivation</keyword>  <keyword>key establishment</keyword>  <keyword>key management</keyword>  <keyword>key recovery</keyword>  <keyword>key transport</keyword></bibitem>

<bibitem id="ACVP">
  <fetched>2022-03-15</fetched>
  <title type="title-main" format="text/plain">Automatic Cryptographic Validation Protocol</title>
  <title type="main" format="text/plain">Automatic Cryptographic Validation Protocol</title>
  <docidentifier>ACVP</docidentifier>
  <date type="published">
    <on>2019-07-01</on>
  </date>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>B.</initial>
        <surname>Fussell</surname>
      </name>
      <affiliation>
        <organization>
          <name>Cisco</name>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>A.</initial>
        <surname>Vassilev</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>H.</initial>
        <surname>Booth</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>C.</initial>
        <surname>Celi</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>R.</initial>
        <surname>Hammett</surname>
      </name>
      <affiliation>
        <organization>
          <name>Huntington Ingalls Industries</name>
          <abbreviation>HII</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="publisher"/>
    <organization>
      <name>National Institute of Standards and Technology</name>
      <abbreviation>NIST</abbreviation>
    </organization>
  </contributor>
</bibitem>
</references>
</annex>
</nist-standard>
