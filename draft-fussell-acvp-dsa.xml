<?xml version="1.0" encoding="UTF-8"?>
<nist-standard xmlns="https://www.metanorma.org/ns/nist" type="semantic" version="2.0.5">
<bibdata type="standard">
<title language="en" format="text/plain" type="main">ACVP DSA Algorithm JSON Specification</title>

<title language="en" format="text/plain" type="short-title">ACVP DSA Algorithm JSON Specification</title>
<uri type="email">algotest@list.nist.gov</uri><uri type="doi">https://doi.org/10.6028/NIST.CSRC.AVCP.DSA</uri><docidentifier type="NIST">ACVP DSA Revision 1</docidentifier><docidentifier type="nist-long">Automated Cryptographic Validation Protocol DSA Revision 1</docidentifier><docidentifier type="nist-mr">NIST.CSRC.ACVP.DSA.r-1.eng</docidentifier><docnumber>DSA</docnumber><date type="issued"><on>2016-06-01</on></date><contributor><role type="author"/><person>
<name><completename>Barry Fussell</completename></name>
<affiliation><organization>
<name>Cisco Systems, Inc.</name>
<address><formattedAddress>170 West Tasman Drive, San Jose, California</formattedAddress></address></organization></affiliation></person></contributor><contributor><role type="publisher"/><organization>
<name>National Institute of Standards and Technology</name>
<subdivision>Computer Security Division, Information Technology Laboratory</subdivision></organization></contributor><edition>Revision 1</edition><language>en</language><script>Latn</script><abstract><p>This document defines the JSON schema for testing FIPS 186-4 DSA implementations with the ACVP specification.</p>
</abstract><status><stage>final</stage><substage>active</substage></status><copyright><from>2016</from><owner><organization>
<name>National Institute of Standards and Technology</name>
</organization></owner></copyright><series type="main">
<title>NIST Cybersecurity Technical Specification</title>
<abbreviation>NIST CSTS</abbreviation></series><series type="secondary">
<title>Automated Cryptographic Validation Protocol</title>
<abbreviation>ACVP</abbreviation></series><keyword>ACVP</keyword><keyword>cryptography</keyword><ext><doctype>standard</doctype></ext></bibdata>
<boilerplate>


  <legal-statement>

<clause id="authority3">
<title>Disclaimer</title>
<p id="_863aa6ce-5a57-69b6-7fbf-9ed44a41c5ea">Any mention of commercial products or reference to commercial organizations is for information only; it does not imply recommendation or endorsement by NIST, nor does it imply that the products mentioned are necessarily the best available for the purpose.</p>
</clause>

<clause id="authority3a">
  <title>Additional Information</title>
  <p id="_c686fd53-3de8-7756-9855-01ef6116c4ac">For additional information on NIST’s Cybersecurity programs, projects and publications, visit the <link target="https://csrc.nist.gov">Computer Security Resource Center</link>. Information on other efforts at <link target="https://www.nist.gov">NIST</link> and in the <link target="https://www.nist.gov/itl">Information Technology Laboratory</link> (ITL) is also available.</p>
</clause>
</legal-statement>

<feedback-statement>
  

<clause id="authority5">
  <p align="center" id="_3c964232-2209-46b9-23ff-8d9dbf50f7e3"><strong>Comments on this publication may be submitted to:</strong></p>

<p align="center" id="_fd3e950b-c15e-6309-a933-da7ca17fced9">National Institute of Standards and Technology <br/>
  Attn: Computer Security Division, Information Technology Laboratory <br/>
  100 Bureau Drive (Mail Stop 8930) Gaithersburg, MD 20899-8930 <br/>
  
  Email: <link target="mailto:algotest@list.nist.gov"/>
  </p>

<p align="center" id="_98da11c8-716c-a4a5-0c72-942c806716f3">All comments are subject to release under the Freedom of Information Act (FOIA).</p>
</clause>
</feedback-statement>
</boilerplate>
<preface><abstract id="_abstract"><title>Abstract</title><p id="_2ac71917-2fc9-c862-9d8d-3002b663bac1">This document defines the JSON schema for testing FIPS 186-4 DSA implementations with the ACVP specification.</p>
</abstract><foreword id="_2ec0e566-ba9d-25ab-2eec-bb7fb030b1a2" obligation="informative">
<title>Foreword</title>
<p id="_69bdcca8-f693-594d-5f4e-1e7dc7fe21de">The Information Technology Laboratory (ITL) at the National Institute of Standards and Technology (NIST) promotes the U.S. economy and public welfare by providing technical leadership for the Nation’s measurement and standards infrastructure. ITL develops tests, test methods, reference data, proof of concept implementations, and technical analyses to advance the development and productive use of information technology. ITL’s responsibilities include the development of management, administrative, technical, and physical standards and guidelines for the cost-effective security and privacy of other than national security-related information in federal information systems. The Special Publication 800-series reports on ITL’s research, guidelines, and outreach efforts in information system security, and its collaborative activities with industry, government, and academic organizations.</p>
</foreword><clause id="_audience" obligation="informative">
<title>Audience</title>
<p id="_d703bff5-9532-6af8-0477-8938fa6a1371">This document is intended for the users and developers of ACVP.</p>
</clause><clause id="_conventions" obligation="informative">
<title>Conventions</title>
<p id="_3239f539-857d-1eda-6971-e6ce8a49a54c">The key words “MUST”, “MUST NOT”, “REQUIRED”, “SHALL”, “SHALL NOT”, “SHOULD”, “SHOULD NOT”, “RECOMMENDED”, “NOT RECOMMENDED”, “MAY”, and “OPTIONAL” in this document are to be interpreted as described in BCP 14 of <eref type="inline" bibitemid="RFC2119" citeas="RFC 2119"/> and <eref type="inline" bibitemid="RFC8174" citeas="RFC 8174"/> when, and only when, they appear in all capitals, as shown here.</p>
</clause><acknowledgements id="_acknowledgements" obligation="informative"><title>Acknowledgements</title><p id="_1b3c0a2a-1733-8a7a-fbaf-605dcd79b05d">This document is produced by the Security Testing, Validation and Measurement group under the Automated Cryptographic Validation Testing (ACVT) program.</p>
</acknowledgements><executivesummary id="_executive_summary" obligation="normative">
<title>Executive Summary</title>
<p id="_9dc64f70-df17-8ff9-f405-3e335331289c">The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing FIPS 186-4 DSA implementations using ACVP.</p>
</executivesummary></preface><sections>








<clause id="introduction" obligation="normative">
<title>Introduction</title>
<p id="_9bf8c86c-ef5c-ab8e-1d2d-6173c66cd619">The Automated Crypto Validation Protocol (ACVP) defines a mechanism to automatically verify the cryptographic implementation of a software or hardware crypto module. The ACVP specification defines how a crypto module communicates with an ACVP server, including crypto capabilities negotiation, session management, authentication, vector processing and more. The ACVP specification does not define algorithm specific JSON constructs for performing the crypto validation. A series of ACVP sub-specifications define the constructs for testing individual crypto algorithms. Each sub-specification addresses a specific class of crypto algorithms. This sub-specification defines the JSON constructs for testing FIPS 186-4 DSA implementations using ACVP.</p>
</clause>

<clause id="supported" obligation="normative">
<title>Supported DSA Algorithms</title>
<p id="_a00d42be-55ac-5e7c-3faf-86d6515a10c3">The following DSA algorithm / mode / revision combinations <strong>MAY</strong> be advertised by the ACVP compliant cryptographic module:</p>

<ul id="_6c60b318-c8f8-e14d-6659-b3abf31737dd"><li><p id="_416b953d-7c50-1330-b6c5-55c5edac3579">DSA / keyGen / 1.0</p>
</li>
<li><p id="_45f28afc-0bbb-0063-52ce-29cd6579a84c">DSA / pqgGen / 1.0</p>
</li>
<li><p id="_9a16b70c-1edf-1446-3c2d-5ca693ad0a6c">DSA / pqgVer / 1.0</p>
</li>
<li><p id="_c354d008-e017-4885-7626-7f94489da610">DSA / sigGen / 1.0</p>
</li>
<li><p id="_091de1be-5625-8342-5048-d394ada3934e">DSA / sigVer / 1.0</p>
</li>
</ul>

<clause id="supported_conformances" obligation="normative">
<title>Supported Conformances for DSA Algorithms</title>
<p id="_9accfed9-11d7-cc64-3faa-9c92481813fe">The following DSA algorithms <strong>MAY</strong> claim conformance to <eref type="inline" bibitemid="SP800-106" citeas="SP 800-106"/>:</p>

<ul id="_8a938c3e-f176-ade3-18d9-0f501485b9bf"><li><p id="_82a42dd9-d385-1a6b-d08d-3258aa255946">DSA / sigGen / 1.0</p>
</li>
<li><p id="_d02be74f-3fe3-dffb-0a4c-542af2d94361">DSA / sigVer / 1.0</p>
</li>
</ul>
</clause>
</clause>

<clause id="testtypes" obligation="normative">
<title>Test Types and Test Coverage</title>
<clause id="ttypes" obligation="normative">
<title>Test Types</title>
<p id="_9406b5d7-7d63-f35f-1668-1a805338081c">The ACVP server performs a set of tests on the specified DSA algorithm in order to assess the correctness and robustness of the implementation. A typical ACVP validation session <strong>SHALL</strong> require multiple tests to be performed for every supported permutation of DSA capabilities. This section describes the design of the tests used to validate implementations of the DSA algorithms.</p>

<ul id="_94d53951-9753-1a1c-d2d9-f234fa4e43c6"><li><p id="_bac075d2-bcc7-9931-77c2-9e016e5fa15b">DSA / keyGen / 1.0 “AFT” — Algorithm Functional Test. The IUT is REQUIRED for each test case provided, to generate a key pair based on a generated group level PQG. This information is then communicated to the ACVP server and validated.</p>
</li>
<li><p id="_ddba3c82-0bd3-66dc-1b3e-0bd73f70a992">DSA / pqgGen / 1.0 “GDT” — Generated Data Test. The IUT in this test mode is <strong>REQUIRED</strong> to generate PQ or G as a response to the ACVP provided test vector set.</p>
</li>
<li><p id="_300bc90e-fc63-e449-a5d8-3f5089d0009c">DSA / pqgVer / 1.0 “GDT” — Generated Data Test. In this test mode, the ACVP server is <strong>REQUIRED</strong> to generate domain parameters for transmission  to the IUT. The IUT is expected to evaluate the validity of the domain parameters.</p>
</li>
<li><p id="_e0b6150e-06aa-584c-afad-d5765866b53f">DSA / sigGen / 1.0 “AFT” — Algorithm Functional Test. This testing mode expects the IUT to generate valid signatures based on the ACVP provided message. The IUT communicates the PQG, public key, and signature to the ACVP server, and the signature is then validated.</p>
</li>
<li><p id="_fc94d06c-f7cb-9ec4-96c6-1a0f21a55d16">DSA / sigVer / 1.0 “AFT” — Algorithm Functional Test. The ACVP server generates a series of signatures to communicate to the IUT. The IUT is <strong>REQUIRED</strong> to determine the validity of the signature given the PQG, key, and message.</p>
</li>
</ul>
</clause>

<clause id="test_coverage" obligation="normative">
<title>Test Coverage</title>
<p id="_4729b17d-ea07-bda9-6afe-65b3d2eca76c">The tests described in this document have the intention of ensuring an implementation is conformant to <eref type="inline" bibitemid="FIPS186-4" citeas="FIPS 186-4"/> and <eref type="inline" bibitemid="SP800-89" citeas="SP 800-89"/>.</p>

<clause id="requirements_covered" obligation="normative">
<title>Requirements Covered</title>
<ul id="_42a83da5-d020-d3f5-7d24-aca2e638ba7d"><li><p id="_a96a0ae4-99d3-0c86-db22-0debbdda8f27">FIPS186-4 Section 3 General Discussion. Domain parameter generation, key generation, signature generation, and signature validation are all within scope of ACVP server testing.</p>
</li>
<li><p id="_ae590479-6a96-d4aa-ca08-f6d9ddd56fc4">FIPS186-4 Section 4 The Digital Signature Algorithm (DSA). The ACVP server provides a means of the generation and validation of domain parameters. The ACVP server is <strong>SHALL</strong> support a variety of parameter sizes/hash function for creation and delivery to/from the IUT. The ACVP server <strong>SHALL</strong> allow for the testing of the validity of domain parameters.  Key pair generation testing <strong>SHALL</strong> be provided by the ACVP server. Both Signature Generation and Validation testing mechanmisms <strong>SHALL</strong> be provided by the ACVP server.</p>
</li>
<li><p id="_5ba512df-ba60-66ce-8f41-0212cb5a5cd9">SP800-106 Section 3 Randomized Hashing and Section 4 Digital Signatures Using Randomized Hashing.  The IUT <strong>SHALL</strong> be provided or provide a random value that should be used to “randomize” a message prior to signing and/or verifying an original message.</p>
</li>
</ul>
</clause>

<clause id="requirements_not_covered" obligation="normative">
<title>Requirements Not Covered</title>
<ul id="_516af29e-ab3c-7502-114b-073b2add7553"><li><p id="_7bf91e26-e438-81ca-e5d2-1cc05e039a0f">FIPS186-4 Section 3 General Discussion. Assurances of private key secrecy and ownership <strong>SHALL NOT</strong> be within scope of ACVP testing.</p>
</li>
<li><p id="_e510363b-a4a3-5dfd-91d0-19bf543d4b5d">FIPS186-4 Section 4 The Digital Signature Algorithm (DSA). The IUT’s selection of parameter sizes and hash functions <strong>SHALL NOT</strong> be within scope of ACVP server testing.  Though the ACVP server <strong>SHALL</strong> support a variety of parameter sizes/hash functions, the IUT’s selection of these is out of scope of testing. The ACVP server <strong>MAY</strong> provide testing for the validity of domain parameters, but testing <strong>SHALL NOT</strong> provide assurances the IUT has validated a set of domain parameters prior to their use. Domain parameter and key pair management <strong>SHALL NOT</strong> be within scope of ACVP testing.</p>
</li>
<li><p id="_bab0eb6d-d628-4eab-527c-cad67baa8bbc">SP800-106 Section 3.3 The Random Value. DSA, ECDSA, and RSA have random values generated as per their signing process, this random value can be used as the input to the message randomization function, doing so however is out of scope of this testing.</p>
</li>
</ul>
</clause>
</clause>
</clause>

<clause id="capabilities" obligation="normative">
<title>Capabilities Registration</title>
<p id="_9981d322-31af-6c16-2f85-b1790435532f">ACVP requires crypto modules to register their capabilities. This allows the crypto module to advertise support for specific algorithms, notifying the ACVP server which algorithms need test vectors generated for the validation process.  This section describes the constructs for advertising support of DSA algorithms to the ACVP server.</p>

<p id="_e83f2311-d713-25d1-f1d9-e2e8ae4204ff">The algorithm capabilities <strong>MUST</strong> be advertised as JSON objects within the ‘algorithms’ value of the ACVP registration message. The ‘algorithms’ value is an array, where each array element is an individual JSON object defined in this section. The ‘algorithms’ value is part of the ‘capability_exchange’ element of the ACVP JSON registration message. See the ACVP specification <eref type="inline" bibitemid="ACVP" citeas="ACVP"/> for more details on the registration message.</p>

<clause id="prerequisites" obligation="normative">
<title>Prerequisites</title>
<p id="_eecbb4b2-6f7f-8408-2ee1-b41ca76bd504">Each algorithm implementation <strong>MAY</strong> rely on other cryptographic primitives.	For example, RSA Signature algorithms depend on an underlying hash function. Each of these underlying algorithm primitives must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</p>

<p id="_f7f16e22-e58b-43df-39ba-87d6ba6a7ad2">Prerequisites, if applicable, <strong>MUST</strong> be submitted in the registration as the <tt>prereqVals</tt> JSON property array inside each element of the <tt>algorithms</tt> array. Each element in the <tt>prereqVals</tt> array <strong>MUST</strong> contain the following properties</p>

<table id="_d4322f66-7335-d05d-c9ce-bc8545c49eaa">
<name>Prerequisite Properties</name>
<thead><tr><th valign="top" align="left">JSON Property</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">a prerequisite algorithm</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">valValue</td>
<td valign="top" align="left">algorithm validation number</td>
<td valign="top" align="left">string</td>
</tr></tbody>
</table>

<p id="_ed4b9036-78af-d8f8-7bd2-30af422f6d02">A “valValue” of “same” <strong>SHALL</strong> be used to indicate that the prerequisite is being met by a different algorithm in the capability exchange in the same registration.</p>

<p id="_e7955338-40d4-e44b-74b8-1f64ebffc1a4">An example description of prerequisites within a single algorithm capability exchange looks like this</p>

<sourcecode id="_89db1eb0-63dd-71b7-8bda-ebdf011fa2ba" lang="json">"prereqVals":
[
  {
    "algorithm": "Alg1",
    "valValue": "Val-1234"
  },
  {
    "algorithm": "Alg2",
    "valValue": "same"
  }
]</sourcecode>

</clause>

<clause id="prereq_algs" obligation="normative">
<title>Required Prerequisite Algorithms for DSA Validations</title>
<p id="_d331643d-b0d7-c58b-f573-a626070b4ada">Each DSA implementation relies on other cryptographic primitives. For example, DSA uses an underlying SHA algorithm. Each of these underlying algorithm primitives must be validated, either separately or as part of the same submission. ACVP provides a mechanism for specifying the required prerequisites:</p>

<table id="rereqs_table">
<name>Required DSA Prerequisite Algorithms JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
<th valign="top" align="left">algorithm</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">a prerequisite algorithm</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">DRBG, SHA, SHA_OPT2</td>
<td valign="top" align="left">valValue</td>
<td valign="top" align="left">algorithm validation number</td>
</tr><tr><td valign="top" align="left">string</td>
<td valign="top" align="left">actual number or “same”</td>
<td valign="top" align="left">prereqAlgVal</td>
<td valign="top" align="left">prerequistie algorithm validation</td>
<td valign="top" align="left">object with algorithm and valValue properties</td>
</tr><tr><td valign="top" align="left">see above</td>
<td valign="top" align="left">prereqVals</td>
<td valign="top" align="left">prerequistie algorithm validations</td>
<td valign="top" align="left">array of prereqAlgVal objects</td>
<td valign="top" align="left">see above</td>
</tr></tbody>
</table>
</clause>

<clause id="dsa_caps_reg" obligation="normative">
<title>DSA Algorithm Capabilities Registration</title>
<p id="_ee418d96-2a8a-d7e4-1beb-a38dc6bf6e2a">Each algorithm capability advertised is a self-contained JSON object using the following values.</p>

<table id="caps_table">
<name>DSA Algorithm Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">The algorithm under test</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">“DSA”</td>
</tr><tr><td valign="top" align="left">mode</td>
<td valign="top" align="left">The DSA mode to be validated</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">“pqgGen”, “pqgVer”, “keyGen”, “sigGen”, “sigVer”</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">The algorithm testing revision to use.</td>
<td valign="top" align="left">string</td>
<td valign="top" align="left">“1.0”</td>
</tr><tr><td valign="top" align="left">prereqVals</td>
<td valign="top" align="left">prerequistie algorithm validations</td>
<td valign="top" align="left">array of prereqAlgVal objects</td>
<td valign="top" align="left">See  <xref target="prereq_algs"/></td>
</tr><tr><td valign="top" align="left">capabilities</td>
<td valign="top" align="left">array of JSON objects, each with fields pertaining to the global DSA mode indicated above and identified uniquely by the combination of the DSA “mode” and indicated properties</td>
<td valign="top" align="left">Array of JSON objects</td>
<td valign="top" align="left">See  <xref target="mode_pqggen"/>, <xref target="mode_pqgver"/>, <xref target="mode_keyGen"/>, <xref target="mode_sigGen"/> or <xref target="mode_sigVer"/></td>
</tr><tr><td valign="top" align="left">conformances</td>
<td valign="top" align="left">Used to denote the optional conformances that can apply to specific modes of DSA.</td>
<td valign="top" align="left">Array of strings</td>
<td valign="top" align="left">See <xref target="supported_conformances"/></td>
</tr></tbody>
</table>
</clause>

<clause id="mode_pqggen" obligation="normative">
<title>DSA pqgGen Mode Capabilities</title>
<p id="_11942fc4-3ca0-852b-6fb7-0634083ff5a0">The DSA / pqgGen / 1.0 mode capabilities are advertised as JSON objects, which are elements of the ‘capabilities’ array in the ACVP registration message. See the ACVP specification for details on the registration message.</p>

<p id="_09be5409-8e1b-2120-70bf-23323ef42fb1">Each DSA / pqgGen / 1.0 mode capability set is advertised as a self-contained JSON object.</p>

<p id="_c2aaf4f1-b4f7-49d4-714d-40fa787e2de1">The complete list of DSA PQ and G generation capabilities may be advertised by the ACVP compliant crypto module:</p>

<table id="pqgGen_table">
<name>DSA pqgGen Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">The length in bits of the field and the length in bits of prime p.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">2048, or 3072</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">The length in bits of q which is a prime factor of (p-1).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">224, or 256 when L is 2048. Otherwise 256.</td>
</tr><tr><td valign="top" align="left">pqGen</td>
<td valign="top" align="left">The methods supported to generate p and q.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">Any non-empty subset of {”probable”, “provable”}.</td>
</tr><tr><td valign="top" align="left">gGen</td>
<td valign="top" align="left">The methods supported to generate g.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">Any non-empty subset of {”unverifiable”, “canonical”}.</td>
</tr><tr><td valign="top" align="left">hashAlg</td>
<td valign="top" align="left">The hash functions supported when generating p, q and g.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">Any non-empty subset of {”SHA2-224”, “SHA2-256”, “SHA2-384”, “SHA2-512”, “SHA2-512/224”, “SHA2-512/256”}. Note that the digest size of the hash function <strong>MUST</strong> be equal to or greater than N.</td>
</tr></tbody>
</table>

<p id="_3678bec1-8d34-a981-e59d-a591f7f1cc45">An example of the DSA / pqgGen / 1.0 registration is the following</p>

<sourcecode id="_20eb675a-2560-929f-5a32-de10e6588398" lang="json">{
  "algorithm": "DSA",
  "mode": "pqgGen",
  "revision": "1.0",
  "prereqVals": [
    {
      "algorithm": "SHA",
      "valValue": "123456"
    },
    {
      "algorithm": "DRBG",
      "valValue": "123456"
    }
  ],
  "capabilities": [
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 2048,
      "n": 224,
      "hashAlg": [
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 2048,
      "n": 256,
      "hashAlg": [
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 3072,
      "n": 256,
      "hashAlg": [
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/256"
      ]
    }
  ]
}</sourcecode>

</clause>

<clause id="mode_pqgver" obligation="normative">
<title>DSA pqgVer Mode Capabilities</title>
<p id="_eb465a65-e620-0ebf-b004-f2b4935e2d20">The DSA / pqgVer / 1.0 mode capabilities are advertised as JSON objects, which are elements of the ‘capabilities’ array in the ACVP registration message. See the ACVP specification for details on the registration message.</p>

<p id="_41f69fc0-e550-e95c-1acb-bcaabcbf6e4d">Each DSA / pqgVer / 1.0 mode capability set is advertised as a self-contained JSON object.</p>

<p id="_763b1588-c551-f246-d058-77fa5ff8f78d">The complete list of DSA P, Q and G verification capabilities may be advertised by the ACVP compliant crypto module:</p>

<table id="pqgVer_table">
<name>DSA pqgVer Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">The length in bits of the field and the length in bits of prime p.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">1024, 2048, or 3072</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">The length in bits of q which is a prime factor of (p-1).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">160 when L is 1024. 224, or 256 when L is 2048. Otherwise 256.</td>
</tr><tr><td valign="top" align="left">pqGen</td>
<td valign="top" align="left">The methods supported to generate p and q.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">Any non-empty subset of {”probable”, “provable”}.</td>
</tr><tr><td valign="top" align="left">gGen</td>
<td valign="top" align="left">The methods supported to generate g.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">Any non-empty subset of {”unverifiable”, “canonical”}.</td>
</tr><tr><td valign="top" align="left">hashAlg</td>
<td valign="top" align="left">The hash functions supported when generating p, q and g.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">Any non-empty subset of {”SHA-1”, “SHA2-224”, “SHA2-256”, “SHA2-384”, “SHA2-512”, “SHA2-512/224”, “SHA2-512/256”}. Note that the digest size of the hash function MUST be equal to or greater than N.</td>
</tr></tbody>
</table>

<p id="_5ba40066-9bb3-8e60-a3c2-1b475e47bda3">An example of the DSA / pqgVer / 1.0 registration is the following</p>

<sourcecode id="_2de6c2c0-fd73-7874-ca25-fe8f7f395dc8" lang="json">{
  "algorithm": "DSA",
  "mode": "pqgVer",
  "revision": "1.0",
  "prereqVals": [
    {
      "algorithm": "SHA",
      "valValue": "123456"
    },
    {
      "algorithm": "DRBG",
      "valValue": "123456"
    }
  ],
  "capabilities": [
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 1024,
      "n": 160,
      "hashAlg": [
        "SHA-1",
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 2048,
      "n": 224,
      "hashAlg": [
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 2048,
      "n": 256,
      "hashAlg": [
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/256"
      ]
    },
    {
      "pqGen": [
        "probable",
        "provable"
      ],
      "gGen": [
        "unverifiable",
        "canonical"
      ],
      "l": 3072,
      "n": 256,
      "hashAlg": [
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/256"
      ]
    }
  ]
}</sourcecode>


<clause id="mode_keyGen" obligation="normative">
<title>DSA keyGen Mode Capabilities</title>
<p id="_3545c61e-c234-77ec-dcc5-69d94a635452">The DSA / keyGen / 1.0 mode capabilities are advertised as JSON objects, which are elements of the ‘capabilities’ array in the ACVP registration message. See the ACVP specification for details on the registration message.</p>

<p id="_4af19407-45e4-6a82-caf8-7c7db505a1ef">Each DSA / keyGen / 1.0 mode capability set is advertised as a self-contained JSON object.</p>

<p id="_62d504c4-865d-2340-8d43-4b051a714331">The complete list of DSA key generation capabilities may be advertised by the ACVP compliant crypto module:</p>

<table id="keyGen_table">
<name>DSA keyGen Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">The length in bits of the field and the length in bits of prime p.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">2048, or 3072</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">The length in bits of q which is a prime factor of (p-1).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">224, or 256 when L is 2048. Otherwise 256.</td>
</tr></tbody>
</table>

<p id="_01562701-9c0b-3814-c218-a19af958385c">An example of this is the following</p>

<sourcecode id="_f9257958-2ff8-2f88-a526-f2c780d6efff" lang="json">{
  "algorithm": "DSA",
  "mode": "keyGen",
  "revision": "1.0",
  "prereqVals": [
    {
      "algorithm": "SHA",
      "valValue": "123456"
    },
    {
      "algorithm": "DRBG",
      "valValue": "123456"
    }
  ],
  "capabilities": [
    {
      "n": 224,
      "l": 2048
    },
    {
      "n": 256,
      "l": 2048
    },
    {
      "n": 256,
      "l": 3072
    }
  ]
}</sourcecode>

</clause>

<clause id="mode_sigGen" obligation="normative">
<title>DSA sigGen Mode Capabilities</title>
<p id="_af3c36f4-e981-6512-0486-26dc2753aa65">The DSA / sigGen / 1.0 mode capabilities are advertised as JSON objects, which are elements of the ‘capabilities’ array in the ACVP registration message. See the ACVP specification for details on the registration message.</p>

<p id="_940641d4-719c-5c88-28fc-fb95a6b458cc">Each DSA / sigGen / 1.0 mode capability set is advertised as a self-contained JSON object.</p>

<p id="_5f02173c-c4d4-4362-1e1b-11219469708e">The complete list of DSA signature generation capabilities may be advertised by the ACVP compliant crypto module:</p>

<table id="sigGen_table">
<name>DSA sigGen Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">The length in bits of the field and the length in bits of prime p.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">2048, or 3072</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">The length in bits of q which is a prime factor of (p-1).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">224, or 256 when L is 2048. Otherwise 256.</td>
</tr><tr><td valign="top" align="left">hashAlg</td>
<td valign="top" align="left">The hash functions supported when signing a message.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">Any non-empty subset of {”SHA2-224”,”SHA2-256”, “SHA2-384”, “SHA2-512”, “SHA2-512/224”, “SHA2-512/256”}.</td>
</tr></tbody>
</table>

<p id="_38092740-32cf-c386-e049-ee134a02ffd9">An example of this is the following</p>

<sourcecode id="_60649668-f360-db85-9ed5-cacda6b0f7c7" lang="json">{
  "algorithm": "DSA",
  "mode": "sigGen",
  "revision": "1.0",
  "prereqVals": [
    {
      "algorithm": "SHA",
      "valValue": "123456"
    },
    {
      "algorithm": "DRBG",
      "valValue": "123456"
    }
  ],
  "capabilities": [
    {
      "n": 224,
      "l": 2048,
      "hashAlg": [
        "SHA-1",
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    },
    {
      "n": 256,
      "l": 2048,
      "hashAlg": [
        "SHA-1",
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    },
    {
      "n": 256,
      "l": 3072,
      "hashAlg": [
        "SHA-1",
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    }
  ],
  "conformances": [
    "SP800-106"
  ]
}</sourcecode>

</clause>

<clause id="mode_sigVer" obligation="normative">
<title>DSA sigVer Mode Capabilities</title>
<p id="_87726391-0d18-4682-ef2c-32306989e68a">The DSA / sigVer / 1.0 mode capabilities are advertised as JSON objects, which are elements of the ‘capabilities’ array in the ACVP registration message. See the ACVP specification for details on the registration message.</p>

<p id="_13f3fcaa-fefb-c8c3-8c6e-9421f2bc18a9">Each DSA / sigVer / 1.0 mode capability set is advertised as a self-contained JSON object.</p>

<p id="_9977ff37-7ff2-b2d1-c6d1-e93e855546db">The complete list of DSA signature verification capabilities may be advertised by the ACVP compliant crypto module:</p>

<table id="sigVer_table">
<name>DSA sigVer Capabilities JSON Values</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
<th valign="top" align="left">Valid Values</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">The length in bits of the field and the length in bits of prime p.</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">1024, 2048, or 3072</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">The length in bits of q which is a prime factor of (p-1).</td>
<td valign="top" align="left">value</td>
<td valign="top" align="left">160 when L is 1024. 224, or 256 when L is2048. Otherwise 256.</td>
</tr><tr><td valign="top" align="left">hashAlg</td>
<td valign="top" align="left">The hash functions supported when verifying a message.</td>
<td valign="top" align="left">array</td>
<td valign="top" align="left">Any non-empty subset of {”SHA-1”,”SHA2-224”, “SHA2-256”, “SHA2-384”, “SHA2-512”, “SHA2-512/224”, “SHA2-512/256”}.</td>
</tr></tbody>
</table>

<p id="_bb0e3fdc-9b00-75f6-7835-25fedabe8376">An example of this is the following</p>

<sourcecode id="_de144dde-4fa1-a91a-ceaa-6ea3872c9311" lang="json">{
  "algorithm": "DSA",
  "mode": "sigVer",
  "revision": "1.0",
  "prereqVals": [
    {
      "algorithm": "SHA",
      "valValue": "123456"
    },
    {
      "algorithm": "DRBG",
      "valValue": "123456"
    }
  ],
  "capabilities": [
    {
      "n": 160,
      "l": 1024,
      "hashAlg": [
        "SHA-1",
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    },
    {
      "n": 224,
      "l": 2048,
      "hashAlg": [
        "SHA-1",
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    },
    {
      "n": 256,
      "l": 2048,
      "hashAlg": [
        "SHA-1",
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    },
    {
      "n": 256,
      "l": 3072,
      "hashAlg": [
        "SHA-1",
        "SHA2-224",
        "SHA2-256",
        "SHA2-384",
        "SHA2-512",
        "SHA2-512/224",
        "SHA2-512/256"
      ]
    }
  ],
  "conformances": [
    "SP800-106"
  ]
}</sourcecode>

</clause>
</clause>
</clause>

<clause id="test-vectors" obligation="normative">
<title>Test Vectors</title>
<p id="_5a1bbe16-5c07-d4d7-904d-42cc8c79b879">The ACVP server provides test vectors to the ACVP client, which are then processed and returned to the ACVP server for validation. A typical ACVP validation test session would require multiple test vector sets to be downloaded and processed by the ACVP client. Each test vector set represents an individual algorithm defined during the capability exchange. This section describes the JSON schema for a test vector set used with FIPS 186-4 DSA algorithms.</p>

<p id="_0e170b93-f1f9-cd13-7197-acfc2470cd66">The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire vector set as well as individual test vectors to be processed by the ACVP client. The following table describes the JSON elements at the top level of the hierarchy.</p>

<table id="_c0dbfd16-5c5e-4fd2-b91f-8e7383367aa0">
<name>Top Level Test Vector JSON Elements</name>
<thead><tr><th valign="top" align="left">JSON Values</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">acvVersion</td>
<td valign="top" align="left">Protocol version identifier</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">vsId</td>
<td valign="top" align="left">Unique numeric vector set identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">Algorithm defined in the capability exchange</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">mode</td>
<td valign="top" align="left">Mode defined in the capability exchange</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">Protocol test revision selected</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">Array of test groups containing test data, see <xref target="tgjs"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_94c2d2c3-b635-9bd2-3289-0ad59c04f197">An example of this would look like this</p>

<sourcecode id="_7f2d9df0-7240-f758-832b-432668f72a4a" lang="json">{
  "acvVersion": "version",
  "vsId": 1,
  "algorithm": "Alg1",
  "mode": "Mode1",
  "revision": "Revision1.0",
  "testGroups": [ ... ]
}</sourcecode>

</clause>

<clause id="tgjs" obligation="normative">
<title>Test Vectors</title>
<p id="_db6a06b6-95dc-4d13-52f5-6e01ec22ff57">The ACVP server provides test vectors to the ACVP client, which are then processed and returned to the ACVP server for validation. A typical ACVP validation session would require multiple test vector sets to be downloaded and processed by the ACVP client. Each test vector set represents an individual crypto algorithm, such as DSA / sigGen / 1.0 etc. This section describes the JSON schema for a test vector set used with DSA crypto algorithms.</p>

<p id="_f20358a6-1915-581f-f00b-4b9d90dee7f9">The test vector set JSON schema is a multi-level hierarchy that contains meta data for the entire vector set as well as individual test vectors to be processed by the ACVP client. The following table describes the JSON elements at the top level of the hierarchy.</p>

<table id="dsa_vs_top_table">
<name>DSA Vector Set JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">acvVersion</td>
<td valign="top" align="left">Protocol version identifier</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">vsId</td>
<td valign="top" align="left">Unique numeric identifier for the vector set</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">algorithm</td>
<td valign="top" align="left">The algorithm used for the test vectors</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">mode</td>
<td valign="top" align="left">The mode used for the test vectors</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">revision</td>
<td valign="top" align="left">The algorithm testing revision to use</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">Array of test group JSON objects, which are defined in <xref target="dsa_pqggen_tgjs"/>, <xref target="dsa_pqgver_tgjs"/>, <xref target="dsa_keyGen_tgjs"/>, <xref target="dsa_sigGen_tgjs"/>, or <xref target="dsa_sigVer_tgjs"/> depending on the algorithm</td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<clause id="dsa_pqggen_test_vectors" obligation="normative">
<title>DSA pqgGen Test Vectors</title>
<clause id="dsa_pqggen_tgjs" obligation="normative">
<title>DSA pqgGen Test Groups JSON Schema</title>
<p id="_1c6b7f54-5588-cdf1-c842-d69d39453448">The testGroups element at the top level in the test vector JSON object is an array of test groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</p>

<p id="_90e010f2-62ea-7193-12c9-00535ff8054d">The test group for DSA / pqgGen / * is as follows:</p>

<table id="dsa_pqggen_vs_tg_table">
<name>DSA PQGGen Test Group JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">testType</td>
<td valign="top" align="left">The test operation performed</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">Length in bits of prime modulus p</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">Length in bits of prime divisor q</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">pqMode</td>
<td valign="top" align="left">The specific pq generation mode used in the test group</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">gMode</td>
<td valign="top" align="left">The specific g generation mode used in the test group</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">hashAlg</td>
<td valign="top" align="left">The hash algorithm used in the test group</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">Array of individual test vector JSON objects, which are defined in <xref target="dsa_pqggen_tvjs"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>
</clause>

<clause id="dsa_pqggen_tvjs" obligation="normative">
<title>DSA pqgGen Test Case JSON Schema</title>
<p id="_52d04b66-0ae5-0046-473a-3665b7bc6877">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / pqgGen / 1.0 test vector.</p>

<table id="dsa_pqggen_vs_tc_table">
<name>DSA PQGGen Test Case JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">p</td>
<td valign="top" align="left">The prime modulus</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">q</td>
<td valign="top" align="left">The prime divisor of p — 1</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">domainSeed</td>
<td valign="top" align="left">The seed used to generate p and q in the probable method</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">index</td>
<td valign="top" align="left">The index value provided to the g generator in the canonical method</td>
<td valign="top" align="left">hex</td>
</tr></tbody>
<note id="_96465951-7720-b008-e171-0f555b7696c0"><p id="_be5f5373-14dc-a7f1-63eb-a7067e672028">For groups generating a p and q value, only the ‘tcId’ property will be present. It is the client’s responsibility to generate a valid p and q pair with the specified properties using the specified generation method from <eref type="inline" bibitemid="FIPS186-4" citeas="FIPS 186-4"/>.</p>
</note><note id="_3addb371-dd0b-b329-146d-cb89b01c9770"><p id="_89a430dd-0c3f-749e-f5e1-528515a04bef">For groups generating a g value, using the “unverifiable” method, only the ‘tcId’, ‘p’ and ‘q’ will be provided. For groups generating a g value using the “canonical” method, an additional ‘domainSeed’ and ‘index’ will be provided. For more information about these generation methods see Appendix A in <eref type="inline" bibitemid="FIPS186-4" citeas="FIPS 186-4"/>.</p>
</note></table>





<p id="_3d38d554-d946-87c6-5f7c-fcb941e67353">The following is an example JSON object sent from the server to the client for DSA / pqgGen / 1.0.</p>

<sourcecode id="_a30e73e0-241c-84ae-69c6-357d141f4b17" lang="json">[
    {
        "acvVersion": &lt;acvp-version&gt;
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "mode": "pqgGen",
        "revision": "1.0",
        "testGroups": [
            {
                "tgId": 1,
                "l": 2048,
                "n": 224,
                "hashAlg": "SHA2-224",
                "pqMode": "probable",
                "testType": "GDT",
                "tests": [
                    {
                        "tcId": 1,
                    }
                ]
            },
            {
                "tgId": 2,
                "l": 2048,
                "n": 224,
                "hashAlg": "SHA2-384",
                "pqMode": "provable",
                "testType": "GDT",
                "tests": [
                    {
                        "tcId": 2,
                    }
                ]
            },
            {
                "tgId": 3,
                "l": 2048,
                "n": 224,
                "hashAlg": "SHA2-224",
                "testType": "GDT",
                "gMode": "unverifiable",
                "tests": [
                    {
                      "tcId": 3,
                      "p": "B9D5DEC1F8541708F...",
                      "q": "9F3FCC1DA20ACCD5C..."
                    }
                ]
            },
            {
                "tgId": 4,
                "l": 2048,
                "n": 224,
                "hashAlg": "SHA2-224",
                "testType": "GDT",
                "gMode": "canonical",
                "tests": [
                    {
                      "tcId": 4,
                      "p": "CACDDA5F26C38B7EF...",
                      "q": "A4D538BAE42A35316...",
                      "domainSeed": "E8A171F4...",
                      "index": "AD"
                    }
                ]
            }
        ]
    }
]</sourcecode>

</clause>
</clause>

<clause id="dsa_pqgver_test_vectors" obligation="normative">
<title>DSA pqgVer Test Vectors</title>
<clause id="dsa_pqgver_tgjs" obligation="normative">
<title>DSA pqgVer Test Groups JSON Schema</title>
<p id="_40ecd5a9-05e0-9b26-2b80-34752ecc9633">The testGroups element at the top level in the test vector JSON object is an array of test groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</p>

<p id="_1006ded3-04b9-1a5d-af4a-29f6eb871d50">The test group for DSA / pqgVer / * is as follows:</p>

<table id="dsa_pqgver_vs_tg_table">
<name>DSA PQGVer Test Group JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">testType</td>
<td valign="top" align="left">The test operation performed</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">Length in bits of prime modulus p</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">Length in bits of prime divisor q</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">pqMode</td>
<td valign="top" align="left">The specific pq generation mode used in the test group</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">gMode</td>
<td valign="top" align="left">The specific g generation mode used in the test group</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">hashAlg</td>
<td valign="top" align="left">The hash algorithm used in the test group</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">Array of individual test vector JSON objects, which are defined in <xref target="dsa_pqgver_tvjs"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>
</clause>

<clause id="dsa_pqgver_tvjs" obligation="normative">
<title>DSA pqgVer Test Case JSON Schema</title>
<p id="_592b6023-c09e-3573-282f-c676f7229fec">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / pqgVer / 1.0 test vector.</p>

<table id="dsa_pqgver_vs_tc_table">
<name>DSA PQGVer Test Case JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">p</td>
<td valign="top" align="left">The prime modulus</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">q</td>
<td valign="top" align="left">The prime divisor of p — 1</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">domainSeed</td>
<td valign="top" align="left">The seed used to generate p and q in the probable method</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">counter</td>
<td valign="top" align="left">The counter used to generate p and q in the probable method</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">pSeed</td>
<td valign="top" align="left">The seed used to generate p in the provable method</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">qSeed</td>
<td valign="top" align="left">The seed used to generate q in the provable method</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">pCounter</td>
<td valign="top" align="left">The counter used to generate p in the provable method</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">qCounter</td>
<td valign="top" align="left">The counter used to generate q in the provable method</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">g</td>
<td valign="top" align="left">The generator</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">h</td>
<td valign="top" align="left">The index value provided to the g generator in the unverifiable method</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">index</td>
<td valign="top" align="left">The index value provided to the g generator in the canonical method</td>
<td valign="top" align="left">hex</td>
</tr></tbody>
<note id="_583e8b3b-99c0-f868-a151-cf3305f1504e"><p id="_9c370c28-a209-5c5d-4477-323acdb87451">For groups verifying a p and q value using the “probable” method, only the ‘tcId’, ‘p’, ‘q’, ‘domainSeed’ and ‘counter’ properties will be present.</p>
</note><note id="_f2cf5f27-4ddf-9a7b-bf86-e01db24b50e1"><p id="_f9a374dd-9654-cb6f-6814-5def5e895831">For groups verifying a p and q value using the “provable” method, only the ‘tcId’, ‘p’, ‘q’, ‘pCounter’, ‘qCounter’, ‘pSeed’ and ‘qSeed’ properties will be present.</p>
</note><note id="_7eba56b2-659d-a829-a7e4-48f3925d77fd"><p id="_0c271609-1cca-e395-e240-cb367343ffca">For groups verifying a g value using the “unverifiable” method, only the ‘tcId’, ‘p’, ‘q’, ‘g’, ‘h’, and ‘domainSeed’ properties will be present.</p>
</note><note id="_b1de9c52-1845-6638-f94b-42c766d832d3"><p id="_47950a37-9d44-db3b-b3c3-e0c22ec12b17">For groups verifying a g value using the “canonical” method, only the ‘tcId’, ‘p’, ‘q’, ‘g’, and ‘index’ properties will be present.</p>
</note></table>









<p id="_9bcb2ab6-1f8c-944b-6255-57cf9c216f31">The following is an example JSON object sent from the server to the client for DSA / pqgVer / 1.0.</p>

<sourcecode id="_a0532165-d64d-7862-8d6a-741360de1e8d" lang="json">[
    {
        "acvVersion": &lt;acvp-version&gt;
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "mode": "pqgVer",
        "revision": "1.0",
        "testGroups": [
          {
            "tgId": 1,
            "l": 1024,
            "n": 160,
            "hashAlg": "SHA-1",
            "testType": "GDT",
            "pqMode": "probable",
            "tests": [
              {
                "tcId": 1,
                "p": "9D9269AC94DB5003355...",
                "q": "C5C97FD66D441234E78...",
                "domainSeed": "259947680F...",
                "counter": 309
              },
            ]
          },
          {
            "tgId": 2,
            "l": 1024,
            "n": 160,
            "hashAlg": "SHA-1",
            "testType": "GDT",
            "pqMode": "provable",
            "tests": [
              {
                "tcId": 36,
                "p": "4BDC98F8302E24CEDCE...",
                "q": "A00C3FEAF8F56910DA5...",
                "pCounter": 1874,
                "qCounter": 115,
                "pSeed": "C4967615C4E1391...",
                "qSeed": "C4967615C4E1391..."
              },
            ]
          },
          {
            "tgId": 3,
            "l": 1024,
            "n": 160,
            "hashAlg": "SHA-1",
            "testType": "GDT",
            "gMode": "unverifiable",
            "tests": [
              {
                "tcId": 211,
                "p": "A1648B0F29F5D38DA507...",
                "q": "9BCF7E1625844A88EABB...",
                "g": "0FB0987B157E12F15D78...",
                "h": "02",
                "domainSeed": "D9F63E102A9..."
              },
            ]
          },
          {
            "tgId": 4,
            "l": 1024,
            "n": 160,
            "hashAlg": "SHA-1",
            "testType": "GDT",
            "gMode": "canonical",
            "tests": [
              {
                "tcId": 246,
                "p": "9A1B46A4498962D12FDE...",
                "q": "B70E07662CADF2A41914...",
                "g": "45659A0B48B5B581E5CA...",
                "index": "45"
              },
            ]
          }
        ]
    }
]</sourcecode>

</clause>
</clause>

<clause id="dsa_keyGen_test_vectors" obligation="normative">
<title>DSA keyGen Test Vectors</title>
<clause id="dsa_keyGen_tgjs" obligation="normative">
<title>DSA keyGen Test Groups JSON Schema</title>
<p id="_f26a8bd3-4ebb-619f-4736-092888d28fea">The testGroups element at the top level in the test vector JSON object is an array of test groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</p>

<p id="_7c763528-dc41-7694-6f64-09e4df4b0ef9">The test group for DSA / keyGen / * is as follows:</p>

<table id="dsa_keyGen_vs_tg_table">
<name>DSA keyGen Test Group JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">testType</td>
<td valign="top" align="left">The test operation performed</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">Length in bits of prime modulus p</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">Length in bits of prime divisor q</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">Array of individual test vector JSON objects, which are defined in <xref target="dsa_keyGen_tvjs"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>
</clause>

<clause id="dsa_keyGen_tvjs" obligation="normative">
<title>DSA keyGen Test Case JSON Schema</title>
<p id="_d0ff9027-5455-ef4e-3c04-f36aec408644">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / keyGen / 1.0 test vector.</p>

<table id="dsa_keyGen_vs_tc_table">
<name>DSA keyGen Test Case JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set</td>
<td valign="top" align="left">integer</td>
</tr></tbody>
<note id="_7b7475d9-ebf6-0235-3a14-6f70c3a7fcd3"><p id="_9217e5b2-0b70-d74a-8752-a88d5f1ae6b1">The client is responsible for generating domain parameters and a key to be verified by the server.</p>
</note></table>



<p id="_561ea467-7583-908c-e771-c74072498572">The following is an example JSON object sent from the server to the client for DSA / keyGen / 1.0.</p>

<sourcecode id="_81705d1d-400c-a060-f156-e5906e94a7c2" lang="json">[
    {
        "acvVersion": &lt;acvp-version&gt;
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "mode": "keyGen",
        "revision": "1.0",
        "testGroups": [
          {
            "tgId": 1,
            "l": 2048,
            "n": 224,
            "tests": [
              {
                "tcId": 1
              },
            ]
          }
        ]
    }
]</sourcecode>

</clause>
</clause>

<clause id="dsa_sigGen_test_vectors" obligation="normative">
<title>DSA sigGen Test Vectors</title>
<clause id="dsa_sigGen_tgjs" obligation="normative">
<title>DSA sigGen Test Groups JSON Schema</title>
<p id="_1f685050-a296-460d-a441-5d7e13719f04">The testGroups element at the top level in the test vector JSON object is an array of test groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</p>

<p id="_05fb54fb-12b9-c8c8-9683-e11f0b91e58a">The test group for DSA / sigGen / * is as follows:</p>

<table id="dsa_sigGen_vs_tg_table">
<name>DSA sigGen Test Group JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">testType</td>
<td valign="top" align="left">The test operation performed</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">Length in bits of prime modulus p</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">Length in bits of prime divisor q</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">hashAlg</td>
<td valign="top" align="left">The hash algorithm used in the test group</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">conformance</td>
<td valign="top" align="left">Signifies all test cases within the group should utilize random message hashing as described in <eref type="inline" bibitemid="SP800-106" citeas="SP 800-106"/>.</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">Array of individual test vector JSON objects, which are defined in <xref target="dsa_sigGen_tvjs"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>
</clause>

<clause id="dsa_sigGen_tvjs" obligation="normative">
<title>DSA sigGen Test Case JSON Schema</title>
<p id="_fe7f1584-206a-2b13-01a1-e164f6d47597">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / sigGen / 1.0 test vector.</p>

<table id="dsa_sigGen_vs_tc_table">
<name>DSA sigGen Test Case JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">message</td>
<td valign="top" align="left">The message used to generate signature or verify signature</td>
<td valign="top" align="left">hex</td>
</tr></tbody>
</table>

<p id="_99ec90c6-5b1b-0a22-a9bd-79b93a018c81">The following is an example JSON object sent from the server to the client for DSA / sigGen / 1.0.</p>

<sourcecode id="_58b31d38-1457-6d0f-b81d-13abd1bbeb4d" lang="json">[
    {
        "acvVersion": &lt;acvp-version&gt;
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "mode": "sigGen",
        "revision": "1.0",
        "testGroups": [
            {
                "tgId": 1,
                "l": 2048,
                "n": 224,
                "hashAlg": "SHA-1",
                "tests": [
                    {
                        "tcId": 1,
                        "message": "C1FEBB069145F..."
                    }
                ]
            },
            {
                "tgId": 2,
                "l": 2048,
                "n": 224,
                "hashAlg": "SHA-1",
                "conformance": "SP800-106",
                "tests": [
                    {
                        "tcId": 2,
                        "message": "C1FEBB069145F..."
                    }
                ]
            }
        ]
    }
]</sourcecode>

</clause>
</clause>

<clause id="dsa_sigVer_test_vectors" obligation="normative">
<title>DSA sigVer Test Vectors</title>
<clause id="dsa_sigVer_tgjs" obligation="normative">
<title>DSA sigVer Test Groups JSON Schema</title>
<p id="_4fb7482d-bdb8-be6b-12bd-805cbdcb20e0">The testGroups element at the top level in the test vector JSON object is an array of test groups. Test vectors are grouped into similar test cases to reduce the amount of data transmitted in the vector set. For instance, all test vectors that use the same key size would be grouped together. The Test Group JSON object contains meta data that applies to all test vectors within the group. The following table describes the secure hash JSON elements of the Test Group JSON object.</p>

<p id="_83aa82c2-461c-2687-7cc4-d9ed4c9793d7">The test group for DSA / sigVer / * is as follows:</p>

<table id="dsa_sigVer_vs_tg_table">
<name>DSA sigVer Test Group JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">testType</td>
<td valign="top" align="left">The test operation performed</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">l</td>
<td valign="top" align="left">Length in bits of prime modulus p</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">n</td>
<td valign="top" align="left">Length in bits of prime divisor q</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">p</td>
<td valign="top" align="left">Domain parameter P</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">q</td>
<td valign="top" align="left">Domain parameter Q</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">g</td>
<td valign="top" align="left">Domain parameter G</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">hashAlg</td>
<td valign="top" align="left">The hash algorithm used in the test group</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">conformance</td>
<td valign="top" align="left">Signifies all test cases within the group should utilize random message hashing as described in <eref type="inline" bibitemid="SP800-106" citeas="SP 800-106"/>.</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">Array of individual test vector JSON objects, which are defined in <xref target="dsa_sigVer_tvjs"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>
</clause>

<clause id="dsa_sigVer_tvjs" obligation="normative">
<title>DSA sigVer Test Case JSON Schema</title>
<p id="_532e0910-92b8-8cb6-23a6-0c60242aad28">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / sigVer / 1.0 test vector.</p>

<table id="dsa_sigVer_vs_tc_table">
<name>DSA sigVer Test Case JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">Numeric identifier for the test case, unique across the entire vector set</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">message</td>
<td valign="top" align="left">The message used to generate signature or verify signature</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">randomValue</td>
<td valign="top" align="left">The random value to be used as an input into the message randomization function as described in <eref type="inline" bibitemid="SP800-106" citeas="SP 800-106"/>.</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">randomValueLen</td>
<td valign="top" align="left">The random value’s bit length.</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">r</td>
<td valign="top" align="left">The signature component R</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">s</td>
<td valign="top" align="left">The signature component S</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">y</td>
<td valign="top" align="left">The public key component Y</td>
<td valign="top" align="left">hex</td>
</tr></tbody>
<note id="_1e17dcdf-2a2c-7de8-a80c-d67ee0380afd"><p id="_8dd4f005-403c-2b88-88c7-a71c9535638f">The ‘randomValue’ and ‘randomValueLen’ properties are only present if the ‘conformance’ property of the group is set to “SP800-106”.</p>
</note></table>



<p id="_02ecf60e-f056-4651-49ca-4d628d34056f">The following is an example JSON object sent from the server to the client for DSA / sigVer / 1.0.</p>

<sourcecode id="_6b1c14d4-02a8-565b-3334-97bd69beb967" lang="json">[
    {
        "acvVersion": &lt;acvp-version&gt;
    },
    {
        "vsId": 1564,
        "algorithm": "DSA",
        "mode": "sigVer",
        "revision": "1.0",
        "testGroups": [
          {
            "tgId": 1,
            "l": 1024,
            "n": 160,
            "p": "A48828B4A4E149C2D1FC66F108D370A2A9E87...",
            "q": "D3C53E62338D4231E42FA9683175C404FBF52...",
            "g": "7BDDD6B8E9B4667397B278F98F446C418EF1A...",
            "hashAlg": "SHA-1",
            "tests": [
              {
                "tcId": 1,
                "message": "1A128C1A61091CE52A8B89D69A3...",
                "y": "A3A2F1AFC3091204B7D7ED3617A80E0FD...",
                "r": "C390851DE10669399308D9F401B0286AA...",
                "s": "26BE6EFDCD2ED6946BFCFE2D396AB3A2E..."
              },
            ]
          },
          {
            "tgId": 2,
            "l": 1024,
            "n": 160,
            "p": "66F108D370A2A9E87DBD49BC09A27017621A...",
            "q": "1F855467465A653D2245B7E31C910A18EF79...",
            "g": "F098ACF73BFC43B1B5E7BFB065FBBDDD6B8E...",
            "hashAlg": "SHA-1",
            "conformance": "SP800-106",
            "tests": [
              {
                "tcId": 2,
                "message": "A0F409909E31C2C23BB7A24B8103F11F...",
                "randomValue": "DB0D25A72C8DEFA0F409909E31C2..."
                "randomValueLen": 1024,
                "y": "A3A284CB56F3A0EF37749B5EA4D2EC824ED5E7EAD481BE520B...",
                "r": "15FE6F6DAEFD42CD5FA7444221CB545BB0CDB95DC9D76E0...",
                "s": "B9AF193E6832934537B0B05D177BA8F7DA48D9DD84D27B8AFE9..."
              },
            ]
          }
        ]
    }
]</sourcecode>

</clause>
</clause>
</clause>

<clause id="responses" obligation="normative">
<title>Test Vector Responses</title>
<p id="_049aa42b-4146-9760-0262-b77702639188">After the ACVP client downloads and processes a vector set, it must send the response vectors back to the ACVP server. The following table describes the JSON object that represents a vector set response.</p>

<table id="response_table">
<name>Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Property</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">acvVersion</td>
<td valign="top" align="left">The ACVP version used</td>
<td valign="top" align="left">string</td>
</tr><tr><td valign="top" align="left">vsId</td>
<td valign="top" align="left">The vector set identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">testGroups</td>
<td valign="top" align="left">The test group objects in the response, see <xref target="response_group_table"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_cd544524-432e-bdbe-53fb-9ad5ed2a5abf">An example of this is the following</p>

<sourcecode id="_0a795f20-9da6-763d-2cbe-f763770553aa" lang="json">{
    "acvVersion": "version",
    "vsId": 1,
    "testGroups": [ ... ]
}</sourcecode>


<p id="_50fa4032-bf22-9a12-f1eb-86fc711f4e06">The ‘testGroups’ section is used to organize the ACVP client response in a similar manner to how it distributes vectors. Some algorithm / mode / revision combinations might require that additional test group properties are provided in the response.</p>

<table id="response_group_table">
<name>Response Group Objects</name>
<thead><tr><th valign="top" align="left">JSON Property</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON Type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">The test case objects in the response, depending on the algorithm see <xref target="dsa_pqggen_vs_tr_table"/>, <xref target="dsa_pqgver_vs_tr_table"/>, <xref target="dsa_keyGen_vs_tr_table"/>, <xref target="dsa_sigGen_vs_tr_table"/> or <xref target="dsa_sigVer_vs_tr_table"/></td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_7a72c26f-9132-3fa7-e28e-1158fdd2a9a9">An example of this is the following</p>

<sourcecode id="_8dc30335-6651-e3dc-9209-1be54d967db3">{
    "tgId": 1,
    "tests": [ ... ]
}</sourcecode>


<clause id="dsa_pqggen_vector_responses" obligation="normative">
<title>DSA PQGGen Test Vector Responses</title>
<p id="_c18ef3a7-8f60-8fc6-351a-e3c2a1138e25">The test groups for DSA / pqgGen / 1.0 contain public key properties. The groups can be described using the following table.</p>

<table id="dsa_pqggen_group_table">
<name>DSA PQGGen Test Group Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">The individual test cases for the group</td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_bfe0ab40-0203-5ce8-41e7-a44c6d14ac82">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / pqgGen / 1.0 test vector.</p>

<table id="dsa_pqggen_vs_tr_table">
<name>DSA PQGGen Test Case Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">The test case identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">p</td>
<td valign="top" align="left">The prime modulus</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">q</td>
<td valign="top" align="left">The prime divisor of p — 1</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">g</td>
<td valign="top" align="left">The generator</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">domainSeed</td>
<td valign="top" align="left">The seed used to generate p and q in the probable method</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">counter</td>
<td valign="top" align="left">The counter used to generate p and q in the probable method</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">pSeed</td>
<td valign="top" align="left">The seed used to generate p in the provable method</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">qSeed</td>
<td valign="top" align="left">The seed used to generate q in the provable method</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">pCounter</td>
<td valign="top" align="left">The counter used to generate p in the provable method</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">qCounter</td>
<td valign="top" align="left">The counter used to generate q in the provable method</td>
<td valign="top" align="left">integer</td>
</tr></tbody>
<note id="_4b9dd834-6f8d-ed06-ab4d-ef73c600fef1"><p id="_8216794c-e82e-8d1e-f1db-202ea6ae421d">The properties ‘p’, ‘q’, ‘domainSeed’ and ‘counter’ are only required in test groups generating p and q using the probable generation method in <eref type="inline" bibitemid="FIPS186-4" citeas="FIPS 186-4"/>. An example of this is ‘tgId’ 1 in the following example.</p>
</note><note id="_0fe797af-23ba-8932-3d17-d4c587c84178"><p id="_85416324-ad5f-5497-cc2d-b3ac0b78b6b6">The properties ‘p’, ‘q’, ‘domainSeed’, ‘pSeed’, ‘qSeed’, ‘pCounter’ and ‘qCounter’ are only required in test groups generating p and q using the provable generation method in <eref type="inline" bibitemid="FIPS186-4" citeas="FIPS 186-4"/>. An example of this is ‘tgId’ 2 in the following example.</p>
</note><note id="_326603ef-77a5-a8d9-ea01-e779e736c184"><p id="_789347f3-81bb-4c53-7b1a-414c4a3da55d">The property ‘g’ is only required in test groups generating g under both allowed modes of generation, canonical and unverifiable. An example of this is ‘tgId’ 3 and 4 in the following example.</p>
</note></table>







<p id="_6e1e3b75-880b-bc6a-c704-6493b3cf577c">The following is an example JSON test vector response object for DSA / pqgGen / 1.0.</p>

<sourcecode id="_b40a46ab-1b7f-5214-2ee7-ddc590b4b422" lang="json">[
    {
        "acvVersion": &lt;acvp-version&gt;
    },
    {
        "vsId": 1564,
        "testGroups": [
            {
              "tgId": 1,
              "tests": [
                {
                  "tcId": 1,
                  "p":"E0BB55A249993FE4...",
                  "q":"C0074BDDC42F22F5...",
                  "domainSeed":"01AA98A...",
                  "counter":379
                }
              ]
            },
            {
              "tgId": 2,
              "tests": [
                {
                  "tcId": 2,
                  "p":"84B73C1CE8E8C10F8...",
                  "q":"A0B7917C9020F2332...",
                  "domainSeed":"98179EF2...",
                  "pSeed":"98179EF2D7FD0...",
                  "qSeed":"98179EF2D7FD0...",
                  "pCounter":596,
                  "qCounter":255
                }
              ]
            },
            {
              "tgId": 3,
              "tests": [
                {
                  "tcId": 3,
                  "g": "01098AD5E87869EF..."
                }
              ]
            },
            {
              "tgId": 4,
              "tests": [
                {
                  "tcId": 4,
                  "g": "5C4AB5D4C901A375..."
                }
              ]
            }
        ]
    }
]</sourcecode>

</clause>

<clause id="dsa_pqgver_vector_responses" obligation="normative">
<title>DSA PQGVer Test Vector Responses</title>
<p id="_23218bd6-af41-80b0-4d5e-eefc06220a6a">The test groups for DSA / pqgVer / 1.0 contain public key properties. The groups can be described using the following table.</p>

<table id="dsa_pqgver_group_table">
<name>DSA PQGVer Test Group Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">The individual test cases for the group</td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_c9aa836a-dd99-b1c4-7c3c-0efb2a8d4084">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / pqgVer / 1.0 test vector.</p>

<table id="dsa_pqgver_vs_tr_table">
<name>DSA PQGVer Test Case Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">The test case identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">testPassed</td>
<td valign="top" align="left">Whether or not the pq pair or g verified</td>
<td valign="top" align="left">boolean</td>
</tr></tbody>
</table>

<p id="_11d3e271-591a-f142-c639-2349a2b3547b">The following is an example JSON test vector response object for DSA / pqgVer / 1.0.</p>

<sourcecode id="_4b5ba64c-753b-1345-ab45-aac370f1269e" lang="json">[
    {
        "acvVersion": &lt;acvp-version&gt;
    },
    {
        "vsId": 1564,
        "testGroups": [
          {
            "tgId": 1,
            "tests": [
              {
                "tcId": 1,
                "testPassed": false,
              }
            ]
          },
          {
            "tgId": 2,
            "tests": [
              {
                "tcId": 36,
                "testPassed": false,
              }
            ]
          },
          {
            "tgId": 3,
            "tests": [
              {
                "tcId": 211,
                "testPassed": true,
              }
            ]
          },
          {
            "tgId": 4,
            "tests": [
              {
                "tcId": 246,
                "testPassed": true,
              }
            ]
          }
        ]
    }
]</sourcecode>

</clause>

<clause id="dsa_keyGen_vector_responses" obligation="normative">
<title>DSA keyGen Test Vector Responses</title>
<p id="_beec6f38-1103-dc2e-a936-e550779c4c80">The test groups for DSA / keyGen / 1.0 contain public key properties. The groups can be described using the following table.</p>

<table id="dsa_keyGen_group_table">
<name>DSA keyGen Test Group Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">p</td>
<td valign="top" align="left">The prime modulus</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">q</td>
<td valign="top" align="left">The prime divisor of p — 1</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">g</td>
<td valign="top" align="left">The generator</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">The individual test cases for the group</td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_c4ff9706-1644-e53c-30a4-7c480bcd1261">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / keyGen / 1.0 test vector.</p>

<table id="dsa_keyGen_vs_tr_table">
<name>DSA keyGen Test Case Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">The test case identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">x</td>
<td valign="top" align="left">The private key component X</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">y</td>
<td valign="top" align="left">The public key component Y</td>
<td valign="top" align="left">hex</td>
</tr></tbody>
</table>

<p id="_91dc64af-9ce4-e382-75d2-6ef193bf101a">The following is an example JSON test vector response object for DSA / keyGen / 1.0.</p>

<sourcecode id="_2741403f-cd4b-e97f-0df9-85cd2f3a3e00" lang="json">[
    {
        "acvVersion": &lt;acvp-version&gt;
    },
    {
        "vsId": 1564,
        "testGroups": [
          {
            "tgId": 1,
            "p": "9D75F12AD16C09A618F3D25...",
            "q": "F9146BFEC592547B8C69737...",
            "g": "96A7DD911D076093EBBA4D9...",
            "tests": [
              {
                "tcId": 1,
                "x": "6316A9021906CB3F9F6...",
                "y": "8520DE9F113D659F708..."
              }
            ]
          }
        ]
    }
]</sourcecode>

</clause>

<clause id="dsa_sigGen_vector_responses" obligation="normative">
<title>DSA sigGen Test Vector Responses</title>
<p id="_fc96de02-443c-6e63-1259-5fb4db88d5d8">The test groups for DSA / sigGen / 1.0 contain public key properties. The groups can be described using the following table.</p>

<table id="dsa_sigGen_group_table">
<name>DSA sigGen Test Group Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">p</td>
<td valign="top" align="left">The prime modulus</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">q</td>
<td valign="top" align="left">The prime divisor of p — 1</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">g</td>
<td valign="top" align="left">The generator</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">y</td>
<td valign="top" align="left">The public key component Y</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">The individual test cases for the group</td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_bd9d1bb3-2687-f4b5-b8b3-d40172ec1b13">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / sigGen / 1.0 test vector.</p>

<table id="dsa_sigGen_vs_tr_table">
<name>DSA sigGen Test Case Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">The test case identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">r</td>
<td valign="top" align="left">The signature component R</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">s</td>
<td valign="top" align="left">The signature component S</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">randomValue</td>
<td valign="top" align="left">The random value to be used as an input into the message randomization function as described in <eref type="inline" bibitemid="SP800-106" citeas="SP 800-106"/>.</td>
<td valign="top" align="left">hex</td>
</tr><tr><td valign="top" align="left">randomValueLen</td>
<td valign="top" align="left">The random value’s bit length.</td>
<td valign="top" align="left">integer</td>
</tr></tbody>
<note id="_08e70e13-dd7f-131f-05e3-4d1ab14569d4"><p id="_6e6864fb-25b0-dcc1-97b1-9bd4c2a193b8">The properties ‘randomValue’ and ‘randomValueLen’ are only required for groups that had the ‘conformance’ property set to “SP800-106”.</p>
</note></table>



<p id="_a7c26fba-5397-f212-481d-76b174a1ef5b">The following is an example JSON test vector response object for DSA / sigGen / 1.0.</p>

<sourcecode id="_41a99980-ebc0-fb2a-1003-5865a1cd2a0a" lang="json">[
  {
    "acvVersion": &lt;acv-version&gt;
  },
  {
    "vsId": 1564,
    "testGroups": [
      {
        "tgId": 1,
        "p": "C8DC6C77CC31ADAE68F3221D59C7...",
        "q": "B1B7BCF2467F8CC46FCDD2A41327...",
        "g": "6C07130A6F6D05AAC9350936EE06...",
        "y": "79143F63ECCC06B3D35C61DA2FB8...",
        "tests": [
          {
            "tcId": 1,
            "r": "4E7F70A92EC0E6871E2EA278...",
            "s": "641A74C54A0B642DED9FE6EE..."
          }
        ]
      },
      {
        "tgId": 2,
        "p": "77CC31ADAE68F3221D59C75538F6...",
        "q": "82E17546E564816AFB54987C879A...",
        "g": "B1303035FE460CEBF21DDA00CC08...",
        "y": "D699C3B6E150E60443BA461C2564...",
        "tests": [
          {
            "tcId": 2,
            "r": "4E7F70A92EC0E6871E2EA275...",
            "s": "641A74C54A0B642DED9FE6EE...",
            "randomValue": "23678643ACB728...",
            "randomValueLen": 1024
          }
        ]
      }
    ]
  }
]</sourcecode>

</clause>

<clause id="dsa_sigVer_vector_responses" obligation="normative">
<title>DSA sigVer Test Vector Responses</title>
<p id="_3b0ab996-8b8e-4882-89a7-884026c763f6">The test groups for DSA / sigVer / 1.0 contain public key properties. The groups can be described using the following table.</p>

<table id="dsa_sigVer_group_table">
<name>DSA sigVer Test Group Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tgId</td>
<td valign="top" align="left">The test group identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">tests</td>
<td valign="top" align="left">The individual test cases for the group</td>
<td valign="top" align="left">array</td>
</tr></tbody>
</table>

<p id="_7fa636cb-c723-aa97-4905-1ee1a2435f46">Each test group contains an array of one or more test cases. Each test case is a JSON object that represents a single test vector to be processed by the ACVP client. The following table describes the JSON elements for each DSA / sigVer / 1.0 test vector.</p>

<table id="dsa_sigVer_vs_tr_table">
<name>DSA sigVer Test Case Response JSON Object</name>
<thead><tr><th valign="top" align="left">JSON Value</th>
<th valign="top" align="left">Description</th>
<th valign="top" align="left">JSON type</th>
</tr></thead>
<tbody><tr><td valign="top" align="left">tcId</td>
<td valign="top" align="left">The test case identifier</td>
<td valign="top" align="left">integer</td>
</tr><tr><td valign="top" align="left">testPassed</td>
<td valign="top" align="left">Whether or not the pq pair or g verified</td>
<td valign="top" align="left">boolean</td>
</tr></tbody>
</table>

<p id="_17771d64-860f-b350-6fac-f8cb892ef0df">The following is an example JSON test vector response object for DSA / sigVer / 1.0.</p>

<sourcecode id="_28ee13d4-fef4-6b09-336e-dade4cf0ff42" lang="json">[
  {
    "acvVersion": &lt;acvp-version&gt;
  },
  {
    "vsId": 1564,
    "testGroups": [
      {
        "tgId": 1,
        "tests": [
          {
            "tcId": 1,
            "testPassed": true
          },
          {
            "tcId": 2,
            "testPassed": true
          }
        ]
      }
    ]
  }
]</sourcecode>

</clause>
</clause>

<clause id="security" obligation="normative">
<title>Security Considerations</title>
<p id="_8c8081d4-3928-ab6b-8e27-43788bf9b389">There are no additional security considerations outside of those outlined in the ACVP document.</p>

<p id="_b1d8edd2-734a-01e5-f02f-afa9e119ec6d">Unresolved directive in draft-fussell-acvp-dsa.adoc — include::/__w/ACVP-standalone/ACVP-standalone/src/common/common-sections/99-acknowledgements.adoc[]</p>
</clause>


</sections><annex id="_af9b8109-c844-4ef8-d2d9-d20045047c6a" obligation="normative">
<title>References</title>
<references id="normref" normative="true" obligation="informative"> <bibitem id="RFC2119" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Key words for use in RFCs to Indicate Requirement Levels</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.2119.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc2119</uri>  <docidentifier type="RFC" primary="true">RFC 2119</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC2119</docidentifier>  <docidentifier type="DOI">10.17487/RFC2119</docidentifier>  <docnumber>RFC2119</docnumber>  <date type="published">    <on>1997-03</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">S. Bradner</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_603f4302-3ed3-eb82-0400-5a63f88d2c36">In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">BCP</title>
    <number>14</number>  </series>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>2119</number>  </series></bibitem>
 <bibitem id="RFC7991" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">The “xml2rfc” Version 3 Vocabulary</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.7991.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc7991</uri>  <docidentifier type="RFC" primary="true">RFC 7991</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC7991</docidentifier>  <docidentifier type="DOI">10.17487/RFC7991</docidentifier>  <docnumber>RFC7991</docnumber>  <date type="published">    <on>2016-12</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">P. Hoffman</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_8fa38028-6adf-af4c-c433-747426aa634a">This document defines the “xml2rfc” version 3 vocabulary: an XML-based language used for writing RFCs and Internet-Drafts. It is heavily derived from the version 2 vocabulary that is also under discussion. This document obsoletes the v2 grammar described in RFC 7749.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>7991</number>  </series></bibitem>
 <bibitem id="RFC8174" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
  <uri type="xml">https://raw.githubusercontent.com/relaton/relaton-data-ietf/master/data/reference.RFC.8174.xml</uri>  <uri type="src">https://www.rfc-editor.org/info/rfc8174</uri>  <docidentifier type="RFC" primary="true">RFC 8174</docidentifier>  <docidentifier type="RFC" scope="anchor">RFC8174</docidentifier>  <docidentifier type="DOI">10.17487/RFC8174</docidentifier>  <docnumber>RFC8174</docnumber>  <date type="published">    <on>2017-05</on>  </date>  <contributor>    <role type="publisher"/>    <organization>      
<name>Internet Engineering Task Force</name>
      <abbreviation>IETF</abbreviation>    </organization>  </contributor>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en">B. Leiba</completename>      </name>
    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <abstract format="text/html" language="en" script="Latn">    <p id="_260e73f1-aaaa-15a9-2626-baec68a4eafa">RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</p>
  </abstract>  <series type="main">    
<title format="text/plain" language="en" script="Latn">BCP</title>
    <number>14</number>  </series>  <series type="main">    
<title format="text/plain" language="en" script="Latn">RFC</title>
    <number>8174</number>  </series></bibitem>
 <bibitem id="FIPS186-4" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Digital Signature Standard (DSS)</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/fips/186/4/final</uri>  <uri type="doi">https://doi.org/10.6028/NIST.FIPS.186-4</uri>  <docidentifier type="NIST" primary="true">FIPS 186-4</docidentifier>  <date type="published">    <on>2013-07</on>  </date>  <date type="issued">    <on>2013-07</on>  </date>  <contributor>    <role type="author"/>    <organization>      
<name>National Institute of Standards and Technology</name>
    </organization>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>active</substage>  </status>  <copyright>    <from>2013</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <relation type="obsoletes">    <description format="text/plain" language="en" script="Latn">supersedes</description>    <bibitem>      <formattedref format="text/plain" language="en" script="Latn">FIPS 186-3</formattedref>      <uri type="src">https://csrc.nist.gov/publications/detail/fips/186/3/archive/2009-06-25</uri>    </bibitem>
  </relation>  <place>Gaithersburg, MD</place>  <keyword>computer security</keyword>  <keyword>cryptography</keyword>  <keyword>Digital Signature Algorithm</keyword>  <keyword>digital signatures</keyword>  <keyword>Elliptic Curve Digital Signature Algorithm</keyword>  <keyword>Federal Information Processing Standard</keyword>  <keyword>public key cryptography</keyword></bibitem>
 <bibitem id="SP800-89" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Recommendation for Obtaining Assurances for Digital Signature Applications</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-89/final</uri>  <uri type="doi">https://doi.org/10.6028/NIST.SP.800-89</uri>  <docidentifier type="NIST" primary="true">SP 800-89</docidentifier>  <date type="published">    <on>2006-11</on>  </date>  <date type="issued">    <on>2006-11</on>  </date>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Elaine B. Barker</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>active</substage>  </status>  <copyright>    <from>2006</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <place>Gaithersburg, MD</place>  <keyword>assurance</keyword>  <keyword>Certification Authority</keyword>  <keyword>digital signatures</keyword>  <keyword>timestamp token</keyword>  <keyword>Trusted Timestamp Authority</keyword></bibitem>
 <bibitem id="SP800-106" type="standard">  <fetched>2022-03-15</fetched>  
<title format="text/plain" language="en" script="Latn">Randomized Hashing for Digital Signatures</title>
  <uri type="src">https://csrc.nist.gov/publications/detail/sp/800-106/final</uri>  <uri type="doi">https://doi.org/10.6028/NIST.SP.800-106</uri>  <docidentifier type="NIST" primary="true">SP 800-106</docidentifier>  <date type="published">    <on>2009-02</on>  </date>  <date type="issued">    <on>2009-02</on>  </date>  <contributor>    <role type="author"/>    <person>      
<name>        <completename language="en" script="Latn">Quynh H. Dang</completename>      </name>
      <affiliation>        <organization>          
<name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>        </organization>      </affiliation>    </person>  </contributor>  <language>en</language>  <script>Latn</script>  <status>    <stage>final</stage>    <substage>active</substage>  </status>  <copyright>    <from>2009</from>    <owner>      <organization>        
<name>National Institute of Standards and Technology</name>
        <abbreviation>NIST</abbreviation>        <uri>www.nist.gov</uri>      </organization>    </owner>  </copyright>  <place>Gaithersburg, MD</place>  <keyword>Digital signature</keyword>  <keyword>cryptographic hash function</keyword>  <keyword>hash function</keyword>  <keyword>collision resistance</keyword>  <keyword>randomized hashing.</keyword></bibitem>

<bibitem id="ACVP">
  <fetched>2022-03-15</fetched>
  <title type="title-main" format="text/plain">Automatic Cryptographic Validation Protocol</title>
  <title type="main" format="text/plain">Automatic Cryptographic Validation Protocol</title>
  <docidentifier>ACVP</docidentifier>
  <date type="published">
    <on>2019-07-01</on>
  </date>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>B.</initial>
        <surname>Fussell</surname>
      </name>
      <affiliation>
        <organization>
          <name>Cisco</name>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>A.</initial>
        <surname>Vassilev</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>H.</initial>
        <surname>Booth</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>C.</initial>
        <surname>Celi</surname>
      </name>
      <affiliation>
        <organization>
          <name>National Institute of Standards and Technology</name>
          <abbreviation>NIST</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="author"/>
    <person>
      <name>
        <initial>R.</initial>
        <surname>Hammett</surname>
      </name>
      <affiliation>
        <organization>
          <name>Huntington Ingalls Industries</name>
          <abbreviation>HII</abbreviation>
        </organization>
      </affiliation>
    </person>
  </contributor>
  <contributor>
    <role type="publisher"/>
    <organization>
      <name>National Institute of Standards and Technology</name>
      <abbreviation>NIST</abbreviation>
    </organization>
  </contributor>
</bibitem>
</references>
</annex>
</nist-standard>
